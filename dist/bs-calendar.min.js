(function($){$.bsCalendar={setDefaults:function(options){this.DEFAULTS=$.extend({},this.DEFAULTS,options||{})},getDefaults:function(){return this.DEFAULTS},DEFAULTS:{locale:"en-EN",startWeekOnSunday:true,rounded:5,search:true,startDate:new Date,startView:"month",defaultColor:"var(--bs-danger)",views:["year","month","week","day"],translations:{day:"Day",week:"Week",month:"Month",year:"Year",today:"Today",appointment:"Appointment",search:"Search"},url:null,queryParams:null,sidebarAddons:null,debug:false,formatInfoWindow:formatInfoWindow,formatDuration:formatDuration}};$.fn.bsCalendar=function(optionsOrMethod,params){if($(this).length>1){return $(this).each(function(i,e){return $(e).bsCalendar(optionsOrMethod,params)})}const optionsGiven=typeof optionsOrMethod==="object";const methodGiven=typeof optionsOrMethod==="string";const wrapper=$(this);if(!wrapper.data("initBsCalendar")){let settings=$.bsCalendar.getDefaults();if(wrapper.data()||optionsGiven){settings=$.extend({},settings,wrapper.data(),optionsOrMethod||{})}setSettings(wrapper,settings);init(wrapper)}if(methodGiven){switch(optionsOrMethod){case"refresh":methodRefresh(wrapper,params);break;case"clear":methodClear(wrapper);break;case"updateOptions":methodUpdateOptions(wrapper,params);break;case"destroy":destroy(wrapper);break;case"setDate":methodSetDate(wrapper,params);break;case"setToday":setToday(wrapper,params);break}}return wrapper};function setToday($wrapper,view){let viewChanged=false;const settings=getSettings($wrapper);if(view&&settings.views.includes(view)){const viewBefore=getView($wrapper);if(viewBefore!==view){setView($wrapper,view);viewChanged=true}}const date=new Date;setDate($wrapper,date);buildByView($wrapper);fetchAppointments($wrapper)}function methodSetDate($wrapper,object){const settings=getSettings($wrapper);let date=null;let viewChanged=false;if(typeof object==="string"){date=new Date(object)}else if(object instanceof Date){date=object}else if(typeof object==="object"){if(object.hasOwnProperty("date")){if(typeof object.date==="string"){date=new Date(object.date)}else if(object.date instanceof Date){date=object.date}}if(object.hasOwnProperty("view")&&settings.views.includes(object.view)){const viewBefore=getView($wrapper);if(viewBefore!==object.view){setView($wrapper,object.view);viewChanged=true}}}if(date){setDate($wrapper,date)}buildByView($wrapper);fetchAppointments($wrapper)}function methodClear($wrapper){$wrapper.find("[data-appointment]").remove();setAppointments($wrapper,[])}function destroy($wrapper){$wrapper.removeData("initBsCalendar");$wrapper.removeData("settings");$wrapper.removeData("view");$wrapper.removeData("date");$wrapper.removeData("appointments");$wrapper.empty()}function methodUpdateOptions($wrapper,options){if(typeof options==="object"){const settingsBefore=getSettings($wrapper);const newSettings=$.extend({},$.bsCalendar.getDefaults(),$wrapper.data(),settingsBefore,options||{});destroy($wrapper);setSettings($wrapper,newSettings);init($wrapper)}}function methodRefresh($wrapper,object){const settings=getSettings($wrapper);let changeSettings=false;let rebuildView=false;if(typeof object==="object"){if(object.hasOwnProperty("url")){settings.url=object.url;changeSettings=true}if(object.hasOwnProperty("view")&&settings.views.includes(object.view)){setView($wrapper,object.view);rebuildView=true;changeSettings=true}if(object.hasOwnProperty("queryParams")&&typeof object.queryParams==="function"){settings.queryParams=object.queryParams;changeSettings=true}}if(changeSettings){setSettings($wrapper,settings)}if(rebuildView){buildByView($wrapper)}fetchAppointments($wrapper)}function formatDuration(duration){const parts=[];if(duration.days>0){parts.push(`${duration.days}d`)}if(duration.hours>0){parts.push(`${duration.hours}h`)}if(duration.minutes>0){parts.push(`${duration.minutes}m`)}if(duration.seconds>0){parts.push(`${duration.seconds}s`)}return parts.length>0?parts.join(" "):"0s"}function formatInfoWindow(appointment){const description=appointment.hasOwnProperty("description")?"<p>"+appointment.description+"</p>":"";const color=appointment.hasOwnProperty("color")?`<i class="bi bi-circle-fill me-2" style="color: ${appointment.color}"></i>`:"";const link=appointment.hasOwnProperty("link")?`<a href="${appointment.link}" target="_blank" class="btn btn-primary btn-sm mt-3">open</a>`:"";const start=new Date(appointment.start);const end=new Date(appointment.end);const startFormatted=start.toLocaleString("de-DE",{dateStyle:"short",timeStyle:"short"});const endFormatted=end.toLocaleString("de-DE",{dateStyle:"short",timeStyle:"short"});const isAllDay=appointment.hasOwnProperty("allDay")&&appointment.allDay;const duration=isAllDay?"":$.bsCalendar.getDefaults().formatDuration(appointment.duration);const startEnd=[`<span>Start: ${startFormatted}</span>`,`<span>End: ${endFormatted}</span>`,`<span>Duration: ${duration}</span>`];const period=isAllDay?`<span class="badge bg-info">all day</span>`:startEnd.join("");return[`<div class="d-flex flex-column">`,`<h4>${color}${appointment.title}</h4>`,description,period,link,`</div>`].join("")}function log(message,...params){if(window.console&&window.console.log){window.console.log("bsCalendar LOG: "+message,...params)}}function trigger($wrapper,event,...params){const settings=getSettings($wrapper);const p=params&&params.length>0?params:[];if(settings.debug){if(p.length>0){log("Triggering event:",event,"with params:",...p)}else{log("Triggering event:",event,"without params")}}if(event!=="all"){$wrapper.trigger("all.bs.calendar",event,...p);$wrapper.trigger(`${event}.bs.calendar`,...p)}}function init($wrapper){return new Promise((resolve,reject)=>{try{const settings=getSettings($wrapper);if(!settings.hasOwnProperty("views")||settings.views.length===0){settings.views=["day","week","month","year"];setSettings($wrapper,settings)}if(!settings.hasOwnProperty("startView")||!settings.startView){settings.startView="month";setSettings($wrapper,settings)}if(!settings.views.includes(settings.startView)){settings.startView=settings.views[0];setSettings($wrapper,settings)}setView($wrapper,settings.startView);setDate($wrapper,settings.startDate);buildFramework($wrapper);handleEvents($wrapper);buildMonthSmallView($wrapper,getDate($wrapper),$(".wc-calendar-month-small"));buildByView($wrapper);$wrapper.data("initBsCalendar",true);if(settings.debug){log("bsCalendar initialized")}trigger($wrapper,"init");resolve($wrapper)}catch(error){reject(error)}})}function setAppointments($wrapper,appointments){if(appointments&&Array.isArray(appointments)&&appointments.length>0){appointments=sortAppointmentByStart(appointments);appointments=splitMultiDayAppointments(appointments);calculateAppointmentDurations($wrapper,appointments)}else{appointments=[]}$wrapper.data("appointments",appointments)}function sortAppointmentByStart(appointments){appointments.sort((a,b)=>{if(a.allDay&&!b.allDay){return-1}if(!a.allDay&&b.allDay){return 1}return new Date(a.start)-new Date(b.start)});return appointments}function getAppointments($wrapper){return $wrapper.data("appointments")}function splitMultiDayAppointments(appointments){appointments.forEach(appointment=>{const start=new Date(appointment.start);const end=new Date(appointment.end);const displayDates=[];let tempDate=new Date(start);tempDate.setHours(0,0,0,0);end.setHours(0,0,0,0);while(tempDate<=end){displayDates.push(`${tempDate.getFullYear()}-${(tempDate.getMonth()+1).toString().padStart(2,"0")}-${tempDate.getDate().toString().padStart(2,"0")}`);tempDate.setDate(tempDate.getDate()+1)}appointment.isSingleDay=displayDates.length===1;appointment.displayDates=displayDates});return appointments}function buildFramework($wrapper){const settings=getSettings($wrapper);$wrapper.empty();const innerWrapper=$("<div>",{class:"d-flex flex-column align-items-stretch h-100 w-100"}).appendTo($wrapper);const topNav=$("<div>",{class:"d-flex sticky-top align-items-center justify-content-end mb-3 wc-calendar-top-nav  bg-body-tertiary rounded-"+settings.rounded}).appendTo(innerWrapper);const btnNew=$("<button>",{class:`btn rounded-${settings.rounded} border-3 border`,html:'<i class="bi bi-plus-lg"></i><span class="d-xl-inline ms-xl-2 ml-xl-2 d-none">'+settings.translations.appointment+"</span>","data-add-appointment":true}).appendTo(topNav);const spinner=$("<div>",{class:"spinner-border me-auto mr-auto mx-3 text-secondary wc-calendar-spinner",css:{display:"none"},role:"status",html:'<span class="visually-hidden">Loading...</span>'}).appendTo(topNav);$("<div>",{class:"me-auto mr-auto"}).appendTo(topNav);const navDate=$("<div>",{class:"d-flex ms-2 align-items-center justify-content-center wc-nav-view-wrapper flex-nowrap text-nowrap",html:['<small class="wc-nav-view-name mr-3 me-3"></small>','<a class="wc-nav-view-prev" href="#"><i class="bi bi-chevron-left"></i></a>','<a class="wc-nav-view-next mx-2" href="#"><i class="bi bi-chevron-right"></i></a>'].join("")}).appendTo(topNav);if(settings.search){const searchInput=$("<input>",{type:"search",class:"form-control ms-2 rounded-"+settings.rounded+" border-3 border",placeholder:settings.translations.search||"search","data-search":true}).appendTo(navDate)}const todayButton=$("<button>",{class:`btn rounded-${settings.rounded} border-3 ms-2 border`,html:settings.translations.today,"data-today":true}).appendTo(topNav);if(settings.views.length>1){const dropDownView=$("<div>",{class:"dropdown wc-select-calendar-view ms-2",html:[`<a class="btn rounded-${settings.rounded} border border-3 dropdown-toggle" href="#" role="button" data-toggle="dropdown" data-bs-toggle="dropdown" aria-expanded="false">`,"</a>",'<ul class="dropdown-menu">',"</ul>"].join("")}).appendTo(topNav);function getIcon(view){switch(view){case"day":return'<i class="bi bi-calendar-day me-2 mr-2"></i>';break;case"week":return'<i class="bi bi-calendar-week me-2 mr-2"></i>';break;case"month":return'<i class="bi bi-calendar-month me-2 mr-2"></i>';break;case"year":return'<i class="bi bi-calendar4 me-2 mr-2"></i>'}}settings.views.forEach(view=>{const li=$("<li>",{html:`<a class="dropdown-item" data-view="${view}" href="#">${getIcon(view)} ${settings.translations[view]}</a>`}).appendTo(dropDownView.find("ul"))})}const container=$("<div>",{class:"d-flex flex-fill wc-calendar-container"}).appendTo(innerWrapper);const leftBar=$("<div>",{class:"wc-calendar-left-nav d-xl-flex d-none flex-column me-4 mr-4",html:['<div class="pb-3">','<div class="d-flex justify-content-between">','<small class="wc-nav-view-small-name me-3 mr-3"></small>',"<div>",'<a class="wc-nav-view-prev" href="#"><i class="bi bi-chevron-left"></i></a>','<a class="wc-nav-view-next ml-2 ms-2" href="#"><i class="bi bi-chevron-right"></i></a>',"</div>","</div>","</div>",'<div class="wc-calendar-month-small"></div>'].join("")}).appendTo(container);if(settings.sidebarAddons){$(settings.sidebarAddons).appendTo(leftBar)}const viewContainer=$("<div>",{class:`container-fluid wc-calendar-view-container  border-1 rounded-${settings.rounded} flex-fill border overflow-hidden  d-flex flex-column align-items-stretch`}).appendTo(container)}function setCurrentDateName($wrapper){const settings=getSettings($wrapper);const date=getDate($wrapper);const view=getView($wrapper);const el=$(".wc-nav-view-name");const elSmall=$(".wc-nav-view-small-name");const dayName=date.toLocaleDateString(settings.locale,{day:"numeric"});const weekdayName=date.toLocaleDateString(settings.locale,{weekday:"long"});const monthName=date.toLocaleDateString(settings.locale,{month:"long"});const yearName=date.toLocaleDateString(settings.locale,{year:"numeric"});const calendarWeek=getCalendarWeek(date);switch(view){case"day":el.text(weekdayName+", "+dayName+" "+monthName+" "+yearName);break;case"week":el.text("KW "+calendarWeek+" / "+monthName+" "+yearName);break;case"month":el.text(monthName+" "+yearName);break;case"year":el.text(yearName);break}elSmall.text(monthName+" "+yearName)}function navigateBack($wrapper){const view=getView($wrapper);const date=getDate($wrapper);const newDate=new Date(date);switch(view){case"month":newDate.setMonth(newDate.getMonth()-1);if(newDate.getDate()!==date.getDate()){newDate.setDate(1)}break;case"year":newDate.setFullYear(newDate.getFullYear()-1);newDate.setDate(1);break;case"week":newDate.setDate(newDate.getDate()-7);break;case"day":newDate.setDate(newDate.getDate()-1);break}setDate($wrapper,newDate);buildByView($wrapper)}function navigateForward($wrapper){const view=getView($wrapper);const date=getDate($wrapper);const newDate=new Date(date);switch(view){case"month":newDate.setMonth(newDate.getMonth()+1);if(newDate.getDate()!==date.getDate()){newDate.setDate(1)}break;case"year":newDate.setFullYear(newDate.getFullYear()+1);newDate.setDate(1);break;case"week":newDate.setDate(newDate.getDate()+7);break;case"day":newDate.setDate(newDate.getDate()+1);break}setDate($wrapper,newDate);buildByView($wrapper)}function handleEvents($wrapper){$wrapper.on("keyup input","[data-search]",function(e){e.preventDefault();const search=$(e.currentTarget).val();const settings=getSettings($wrapper);if(search){setView($wrapper,"search")}else{setView($wrapper,settings.startView)}buildByView($wrapper)}).on("click","[data-add-appointment]",function(e){e.preventDefault();const date=getDate($wrapper);const formattedDate=date.toISOString().split("T")[0];const view=getView($wrapper);const period=getStartAndEndDateByView($wrapper);const data={date:period.date,view:{type:view,start:period.start,end:period.end}};trigger($wrapper,"add",[data])}).on("click","[data-today]",function(e){e.preventDefault();setToday($wrapper)}).on("click","[data-appointment]",function(e){e.preventDefault();const element=$(e.currentTarget);element.popover("hide");element.removeClass("text-bg-light");const appointment=element.data("appointment");trigger($wrapper,"edit",[appointment,element])}).on("click","[data-date]",function(e){e.preventDefault();const settings=getSettings($wrapper);if(settings.views.includes("day")){const date=new Date($(e.currentTarget).attr("data-date"));setView($wrapper,"day");setDate($wrapper,date);buildByView($wrapper)}}).on("click","[data-month]",function(e){e.preventDefault();const settings=getSettings($wrapper);if(settings.views.includes("month")){const date=new Date($(e.currentTarget).attr("data-month"));setView($wrapper,"month");setDate($wrapper,date);buildByView($wrapper)}}).on("click",".wc-nav-view-prev",function(e){e.preventDefault();navigateBack($wrapper)}).on("click",".wc-nav-view-next",function(e){e.preventDefault();navigateForward($wrapper)}).on("click",".wc-select-calendar-view [data-view]",function(e){e.preventDefault();const dropdown=$(e.currentTarget).closest(".dropdown");dropdown.find(".dropdown-item.active").removeClass("active");const a=$(e.currentTarget);const translate=a.text();dropdown.find(".dropdown-toggle").text(translate);const view=a.data("view");a.addClass("active");setView($wrapper,view);buildByView($wrapper)})}function updateDropdownView($wrapper){const dropdown=$wrapper.find(".wc-select-calendar-view");const view=getView($wrapper);dropdown.find(".dropdown-item.active").removeClass("active");dropdown.find(`[data-view="${view}"]`).addClass("active");const activeItem=dropdown.find(`[data-view="${view}"]`);dropdown.find(".dropdown-toggle").html(activeItem.html())}function getView($wrapper){return $wrapper.data("view")}function setView($wrapper,view){const settings=getSettings($wrapper);if(view!=="search"&&!["day","week","month","year"].includes(view)){if(settings.debug){console.error("Invalid view type provided. Defaulting to month view.","Provided view:",view)}view="month"}if(settings.debug){log("Set view to:",view)}$wrapper.data("view",view)}function getDate($wrapper){return $wrapper.data("date")}function setDate($wrapper,date){const settings=getSettings($wrapper);if(settings.debug){log("Set date to:",date)}$wrapper.data("date",date)}function getSettings($wrapper){return $wrapper.data("settings")}function setSettings($wrapper,settings){if(settings.debug){log("Set settings to:",settings)}$wrapper.data("settings",settings)}function getViewContainer($wrapper){return $wrapper.find(".wc-calendar-view-container")}function buildByView($wrapper){const settings=getSettings($wrapper);const view=getView($wrapper);if(settings.debug){log("Call buildByView with view:",view)}const container=getViewContainer($wrapper).empty();switch(view){case"month":buildMonthView($wrapper);break;case"week":buildWeekView($wrapper);break;case"year":buildYearView($wrapper);break;case"day":buildDayView($wrapper);break;case"search":buildSearchView($wrapper);break;default:break}$wrapper.find(".popover").remove();updateDropdownView($wrapper);setCurrentDateName($wrapper);buildMonthSmallView($wrapper,getDate($wrapper),$(".wc-calendar-month-small"));trigger($wrapper,"view",[view]);fetchAppointments($wrapper)}function fetchAppointments($wrapper){const settings=getSettings($wrapper);if(settings.debug){log("Call fetchAppointments")}const date=getDate($wrapper);const view=getView($wrapper);const searchElement=getSearchElement($wrapper);const search=searchElement?.val()??null;const period=getStartAndEndDateByView($wrapper);const spinner=$wrapper.find(".wc-calendar-spinner");$wrapper.find(".popover").remove();$wrapper.find("[data-appointment]").remove();const requestData={fromDate:period.start,toDate:period.end,view:view,search:search};if(typeof settings.queryParams==="function"){const queryParams=settings.queryParams(requestData);for(const key in queryParams){if(key!=="fromDate"&&key!=="toDate"&&key!=="view"&&key!=="search"){requestData[key]=queryParams[key]}}}trigger($wrapper,"beforeLoad",[requestData]);if(typeof settings.url==="function"){showLoader($wrapper);const appointments=settings.url(requestData)||[];if(settings.debug){log("Call appointments by function:",appointments)}setAppointments($wrapper,appointments);renderAppointments($wrapper)}else if(typeof settings.url==="string"){showLoader($wrapper);const existingRequest=$wrapper.data("currentRequest");if(existingRequest){existingRequest.abort()}if(settings.debug){log("Call appointments by URL:",settings.url)}const newRequest=$.ajax({url:settings.url,method:"GET",contentType:"application/json",data:JSON.stringify(requestData),success:function(response){setAppointments($wrapper,response||[]);renderAppointments($wrapper)},error:function(xhr,status,error){if(status!=="abort"){if(settings.debug){log("Error when retrieving the dates:",status,error)}hideLoader($wrapper)}},complete:function(){$wrapper.removeData("currentRequest")}});$wrapper.data("currentRequest",newRequest)}}function isDarkBackgroundColor(color){let r,g,b;if(color.startsWith("#")){r=parseInt(color.slice(1,3),16);g=parseInt(color.slice(3,5),16);b=parseInt(color.slice(5,7),16)}else if(color.startsWith("rgb")){const rgbValues=color.match(/\d+/g);r=parseInt(rgbValues[0]);g=parseInt(rgbValues[1]);b=parseInt(rgbValues[2])}else{throw new Error("Unsupported color format")}const yiq=(r*299+g*587+b*114)/1e3;return yiq>128}function checkAppointmentOverlap(appointment1,appointment2){return new Date(appointment1.start)<new Date(appointment2.end)&&new Date(appointment1.end)>new Date(appointment2.start)}function assignColumnsToAppointments(appointments){const columns=[];appointments.forEach(appointment=>{let placedInColumn=false;for(let i=0;i<columns.length;i++){const column=columns[i];if(fitsColumn(column,appointment)){column.push(appointment);placedInColumn=true;break}}if(!placedInColumn){columns.push([appointment])}});return columns}function fitsColumn(column,appointment){return column.every(colAppointment=>!checkAppointmentOverlap(appointment,colAppointment))}function buildAppointmentsForWeek($wrapper,appointments){const container=getViewContainer($wrapper);const settings=getSettings($wrapper);const appointmentsByWeekday=[[],[],[],[],[],[],[]];appointments.forEach(appointment=>{appointment.displayDates.forEach(startString=>{const appointmentDate=new Date(appointment.start);const weekday=appointmentDate.getDay();appointmentsByWeekday[weekday].push(appointment)})});for(let weekday=0;weekday<7;weekday++){const dates=appointmentsByWeekday[weekday]||[];const $dayWrapper=container.find('[data-week-day="'+weekday+'"] .wc-day-view-time-slots');const margin=settings.startWeekOnSunday&&weekday===0||!settings.startWeekOnSunday&&weekday===1;buildAppointmentsForDay($wrapper,$dayWrapper,dates,margin?1:1)}}function buildAppointmentsForDay($wrapper,$container,appointments,marginLeft=1){const settings=getSettings($wrapper);const columns=assignColumnsToAppointments(appointments);const gap=1;const containerWidth=$container.width();const containerHeight=$container.height();const appointmentWidthPercent=((containerWidth-marginLeft)/columns.length-gap)/containerWidth*100;columns.forEach((column,columnIndex)=>{column.forEach(appointment=>{const start=new Date(appointment.start);const end=new Date(appointment.end);const startHour=start.getHours();const startMinute=start.getMinutes();const endHour=end.getHours();const endMinute=end.getMinutes();const hourContainer=$container.find(`[data-day-hour="${startHour}"]`);const hourPositionTop=hourContainer.position().top;const minuteOffset=startMinute/60*34;const topPositionInPixels=hourPositionTop+minuteOffset;const durationInHours=endHour+endMinute/60-(startHour+startMinute/60);const appointmentHeightInPixels=durationInHours*34;const topPositionPercent=topPositionInPixels/containerHeight*100;const appointmentHeightPercent=appointmentHeightInPixels/containerHeight*100;const appointmentLeftInPixels=marginLeft+columnIndex*(appointmentWidthPercent*containerWidth/100+gap);const appointmentLeftPercent=appointmentLeftInPixels/containerWidth*100;let durationString=end.toTimeString().slice(0,5);if(typeof settings.formatDuration==="function"){durationString+=" ("+settings.formatDuration(appointment.duration)+")"}const backgroundColor=appointment.color||settings.defaultColor;const appointmentElement=$("<small>",{"data-appointment":true,class:"position-absolute text-nowrap text-truncate shadow px-2 btn-sm overflow-hidden",css:{backgroundColor:backgroundColor,top:`${topPositionPercent}%`,height:`${appointmentHeightPercent}%`,left:`${appointmentLeftPercent}%`,width:`${appointmentWidthPercent}%`},html:`<div class="">${start.toTimeString().slice(0,5)} ${durationString} - ${appointment.title||"Ohne Titel"}</div>`}).appendTo($container);appointmentElement.data("appointment",appointment);setColorByBackgroundColor(appointmentElement,settings.defaultColor);setPopoverForAppointment($wrapper,appointmentElement)})})}function setColorByBackgroundColor($el,defaultColor){const backgroundColor=$el.css("background-color")||defaultColor;$el.css("color",!isDarkBackgroundColor(backgroundColor)?"#ffffff":"#000000")}function isSameDate(date1,date2){return date1.getFullYear()===date2.getFullYear()&&date1.getMonth()===date2.getMonth()&&date1.getDate()===date2.getDate()}function buildAppointmentsForSearch($wrapper,appointments){const settings=getSettings($wrapper);const $container=getViewContainer($wrapper).find(".wc-search-result-container").css("font-size",".9rem");if(!appointments.length){$container.html('<div class="d-flex h-100 w-100 align-items-center justify-content-center"> <i class="bi bi-calendar2-x fs-4"></i></div>');return}appointments.forEach(appointment=>{const appointmentElement=$("<div>",{"data-appointment":true,class:"list-group-item d-flex align-items-center g-3 py-1 overflow-hidden",html:`
        <div class="day fw-bold fs-3 text-center" style="width: 60px;" data-date="${formatDate($wrapper,new Date(appointment.start))}">
            ${new Date(appointment.start).getDate()}
        </div>
        <div class="text-muted" style="width: 150px;">
            ${new Date(appointment.start).toLocaleDateString(settings.locale,{month:"short",year:"numeric",weekday:"short"})}
        </div>
        <div class="title-container flex-fill text-nowrap">
            ${appointment.title}
        </div>
        `}).appendTo($container);appointmentElement.data("appointment",appointment);setPopoverForAppointment($wrapper,appointmentElement)})}function buildAppointmentsForMonth($wrapper,appointments){const $container=getViewContainer($wrapper);const settings=getSettings($wrapper);if(settings.debug){log("Call buildAppointmentsForMonth with appointments:",appointments)}const max=6;appointments.forEach(appointment=>{const multipleStartDates=appointment.displayDates.length>1;appointment.displayDates.forEach(startString=>{const fakeStart=new Date(startString);const start=new Date(appointment.start);const startDate=start.toISOString().split("T")[0];const sameDate=isSameDate(fakeStart,start);const isNotStartOnThisDay=multipleStartDates&&!sameDate;const isStartOnThisDay=multipleStartDates&&sameDate;if(!isNotStartOnThisDay){console.warn("Appointment start date does not match the start date of the appointment:",startDate,startString)}const startTime=start.toLocaleTimeString(settings.locale,{hour:"2-digit",minute:"2-digit"});const dayContainer=$container.find(`[data-month-date="${startString}"]`);let iconClass=`bi-clock`;if(appointment.allDay){iconClass=`bi-circle-fill`}else if(isStartOnThisDay){iconClass=`bi-arrow-bar-right`}else if(isNotStartOnThisDay){iconClass=`bi-arrow-bar-left`}const timeToShow=appointment.allDay?"":`<small class="me-1 mr-1">${startTime}</small>`;const appointmentElement=$("<small>",{"data-appointment":true,css:{fontSize:"12px",lineHeight:"16px"},class:"px-1 w-100 overflow-hidden",html:[`<div class=" d-flex align-items-center flex-nowrap">`,`<i class="bi ${iconClass} me-1 mr-1" style="color: ${appointment.color||settings.defaultColor}; font-size: 12px"></i>`,timeToShow,`<strong class="text-nowrap">${appointment.title}</strong>`,`</div>`].join("")}).appendTo(dayContainer);appointmentElement.data("appointment",appointment);setPopoverForAppointment($wrapper,appointmentElement)})})}function setPopoverForAppointment($wrapper,$appointmentElement){const settings=getSettings($wrapper);if(typeof settings.formatInfoWindow==="function"){$appointmentElement.css("cursor","pointer");const appointment=$appointmentElement.data("appointment");const delayShow=400;const delayHide=400;const activeClass="text-bg-light";$appointmentElement.popover({animation:false,sanitize:false,trigger:"manual",html:true,content:settings.formatInfoWindow(appointment),container:$wrapper}).on("mouseenter",function(){$("[data-appointment]").not($(this)).popover("hide").removeClass(activeClass);const _this=this;$(_this).data("timeout",setTimeout(()=>{$(_this).popover("show");$(_this).addClass(activeClass);const popover=$(".popover");popover.on("mouseenter",function(){clearTimeout($(_this).data("timeout"))});popover.on("mouseleave",function(){$(_this).data("timeout",setTimeout(()=>{$(_this).popover("hide");$(_this).removeClass(activeClass)},delayHide))})},delayShow))}).on("mouseleave",function(e){clearTimeout($(this).data("timeout"));const _this=this;$(_this).data("timeout",setTimeout(()=>{$(_this).popover("hide");$(_this).removeClass(activeClass)},delayHide))})}}function calculateAppointmentDurations($wrapper,appointments){const settings=getSettings($wrapper);appointments.forEach(appointment=>{const start=new Date(appointment.start);const end=new Date(appointment.end);const diffMillis=end-start;if(appointment.allDay){const days=Math.ceil(diffMillis/(1e3*60*60*24));appointment.duration={days:days,hours:0,minutes:0,seconds:0}}else{const totalSeconds=Math.floor(diffMillis/1e3);const days=Math.floor(totalSeconds/(24*3600));const hours=Math.floor(totalSeconds%(24*3600)/3600);const minutes=Math.floor(totalSeconds%3600/60);const seconds=totalSeconds%60;appointment.duration={days:days,hours:hours,minutes:minutes,seconds:seconds}}});if(settings.debug){log("Calculated durations:",appointments)}}function buildAppointmentsForView($wrapper){$wrapper.find("[data-appointment]").remove();const appointments=getAppointments($wrapper);const view=getView($wrapper);const settings=getSettings($wrapper);if(settings.debug){log("Call renderData with view:",view)}const container=getViewContainer($wrapper);switch(view){case"day":const overContainer=container.find(".wc-day-view-time-slots");buildAppointmentsForDay($wrapper,overContainer,appointments);break;case"week":buildAppointmentsForWeek($wrapper,appointments);break;case"month":buildAppointmentsForMonth($wrapper,appointments);break;case"search":buildAppointmentsForSearch($wrapper,appointments);break;case"year":break}}function renderAppointments($wrapper){buildAppointmentsForView($wrapper);hideLoader($wrapper)}function showLoader($wrapper){const spinner=$wrapper.find(".wc-calendar-spinner");spinner.show()}function hideLoader($wrapper){const spinner=$wrapper.find(".wc-calendar-spinner");spinner.hide()}function getStartAndEndDateByView($wrapper){const settings=getSettings($wrapper);const date=getDate($wrapper);const view=getView($wrapper);const startDate=new Date(date);const endDate=new Date(date);switch(view){case"day":break;case"week":const dayOfWeek=startDate.getDay();const diffToMonday=dayOfWeek===0?-6:1-dayOfWeek;startDate.setDate(startDate.getDate()+diffToMonday);endDate.setDate(startDate.getDate()+6);break;case"month":startDate.setDate(1);endDate.setMonth(startDate.getMonth()+1);endDate.setDate(0);break;case"year":case"search":startDate.setMonth(0);startDate.setDate(1);endDate.setMonth(11);endDate.setDate(31);break;default:if(settings.debug){console.error("Unknown view:",view)}break}return{date:date.toISOString().split("T")[0],start:startDate.toISOString().split("T")[0],end:endDate.toISOString().split("T")[0]}}function getSearchElement($wrapper){return $wrapper.find("[data-search]")||null}function getShortWeekDayNames(locale,startWeekOnSunday){const formatter=new Intl.DateTimeFormat(locale,{weekday:"short"});const weekDays=[...Array(7).keys()].map(day=>formatter.format(new Date(Date.UTC(2023,0,day+1))));return startWeekOnSunday?weekDays:weekDays.slice(1).concat(weekDays[0])}function buildSearchView($wrapper){const container=getViewContainer($wrapper);const settings=getSettings($wrapper);const searchElement=getSearchElement($wrapper);container.empty();const $searchContainer=$("<div>",{class:"wc-search-result-container list-group list-group-flush vh-100 overflow-auto"}).appendTo(container)}function buildMonthView($wrapper){const container=getViewContainer($wrapper);const settings=getSettings($wrapper);const date=getDate($wrapper);const{locale,startWeekOnSunday}=settings;const year=date.getFullYear();const month=date.getMonth();const firstDayOfMonth=new Date(year,month,1);const lastDayOfMonth=new Date(year,month+1,0);let calendarStart=new Date(firstDayOfMonth);while(calendarStart.getDay()!==(startWeekOnSunday?0:1)){calendarStart.setDate(calendarStart.getDate()-1)}let calendarEnd=new Date(lastDayOfMonth);while(calendarEnd.getDay()!==(startWeekOnSunday?6:0)){calendarEnd.setDate(calendarEnd.getDate()+1)}container.empty();const weekdaysRow=$("<div>",{class:"row d-flex flex-nowrap wc-calendar-weekdays fw-bold text-bg-secondary"}).append($("<div>",{class:"col px-1 d-flex align-items-center justify-content-center",style:"width: 24px",html:"<small></small>"}));const weekDays=getShortWeekDayNames(locale,startWeekOnSunday);weekDays.forEach(day=>{weekdaysRow.append($("<div>",{class:"text-center col px-1 flex-fill",html:`<small>${day}</small>`}))});container.append(weekdaysRow);let currentDate=new Date(calendarStart);while(currentDate<=calendarEnd){const weekRow=$("<div>",{class:"row d-flex flex-nowrap flex-fill wc-calendar-content"});const calendarWeek=getCalendarWeek(currentDate);weekRow.append($("<div>",{class:"col px-1 d-flex align-items-start py-2 fw-bold text-bg-secondary justify-content-center",style:"width: 24px;",html:`<small>${calendarWeek}</small>`}));for(let i=0;i<7;i++){const isToday=currentDate.toDateString()===(new Date).toDateString();const isOtherMonth=currentDate.getMonth()!==month;const dayClass=isToday?"rounded-circle text-bg-primary":"";const dayWrapper=$("<div>",{"data-month-date":formatDate($wrapper,currentDate),class:`col px-1 border flex-fill d-flex flex-column align-items-center justify-content-start ${isOtherMonth?"text-muted":""} ${isToday?"":""}`,css:{maxHeight:"100%",overflowY:"auto"}}).appendTo(weekRow);$("<small>",{"data-date":formatDate($wrapper,currentDate),css:{width:"24px",height:"24px",lineHeight:"24px",fontSize:"12px"},class:`${dayClass} text-center`,text:currentDate.getDate()}).appendTo(dayWrapper);currentDate.setDate(currentDate.getDate()+1)}container.append(weekRow)}}function buildMonthSmallView($wrapper,forDate,$container){const settings=getSettings($wrapper);const date=forDate;const activeDate=getDate($wrapper);const year=date.getFullYear();const month=date.getMonth();const firstDayOfMonth=new Date(year,month,1);const lastDayOfMonth=new Date(year,month+1,0);let calendarStart=new Date(firstDayOfMonth);while(calendarStart.getDay()!==1){calendarStart.setDate(calendarStart.getDate()-1)}let calendarEnd=new Date(lastDayOfMonth);while(calendarEnd.getDay()!==0){calendarEnd.setDate(calendarEnd.getDate()+1)}$container.empty();$container.addClass("table-responsive");const table=$("<table>",{class:"wc-mini-calendar",css:{fontSize:"10px",borderSpacing:"0",borderCollapse:"collapse",tableLayout:"fixed",textAlign:"center",verticalAlign:"middle",lineHeight:"1.5",padding:"0",margin:"0",backgroundColor:"transparent",border:"0"}}).appendTo($container);const thead=$("<thead>").appendTo(table);const weekdaysRow=$("<tr>",{class:"",css:{height:"24px"}}).appendTo(thead);$("<th>",{class:"",css:{width:"15px"},text:""}).appendTo(weekdaysRow);const weekDays=getShortWeekDayNames(settings.locale,settings.startWeekOnSunday);weekDays.forEach(day=>{$("<th>",{class:"",text:day}).appendTo(weekdaysRow)});const tbody=$("<tbody>").appendTo(table);let currentDate=new Date(calendarStart);while(currentDate<=calendarEnd){const weekRow=$("<tr>",{css:{fontSize:"10px"}}).appendTo(tbody);const calendarWeek=getCalendarWeek(currentDate);$("<td>",{css:{width:"10px",fontSize:"10px"},class:"border-end pe-1 text-end text-secondary fw-bold",text:calendarWeek}).appendTo(weekRow);for(let i=0;i<7;i++){const isToday=currentDate.toDateString()===(new Date).toDateString();const isOtherMonth=currentDate.getMonth()!==month;const isSelected=currentDate.toDateString()===activeDate.toDateString();let dayClass="rounded-circle";if(isToday){dayClass+="  text-bg-primary "}if(isOtherMonth){dayClass+=" text-muted opacity-50"}if(isSelected&&!isToday){dayClass+=" border border-warning"}const td=$("<td>",{"data-date":formatDate($wrapper,currentDate),css:{cursor:"pointer",fontSize:"10px",width:"24px",height:"24px",lineHeight:"24px",verticalAlign:"middle",textAlign:"center"},html:`<div class="${dayClass} w-100 h-100 d-flex justify-content-center align-items-center">${currentDate.getDate()}</div>`}).appendTo(weekRow);currentDate.setDate(currentDate.getDate()+1)}}}function buildDayView($wrapper){const container=getViewContainer($wrapper);const date=getDate($wrapper);buildDayViewContent($wrapper,date,container)}function formatDate($wrapper,date){const settings=getSettings($wrapper);let day=date.toLocaleDateString(settings.locale,{day:"numeric"});if(day<10){day="0"+day}let month=date.toLocaleDateString(settings.locale,{month:"numeric"});if(month<10){month="0"+month}const year=date.toLocaleDateString(settings.locale,{year:"numeric"});return`${year}-${month}-${day}`}function getCalendarWeek(date){const target=new Date(Date.UTC(date.getFullYear(),date.getMonth(),date.getDate()));const dayNr=(target.getUTCDay()+6)%7;target.setUTCDate(target.getUTCDate()-dayNr+3);const firstThursday=new Date(Date.UTC(target.getUTCFullYear(),0,4));const firstDayOfWeek=firstThursday.getUTCDate()-(firstThursday.getUTCDay()+6)%7;const weekNumber=Math.floor(1+(target-new Date(Date.UTC(target.getUTCFullYear(),0,firstDayOfWeek)))/(7*24*60*60*1e3));return weekNumber}function buildWeekView($wrapper){const $viewContainer=getViewContainer($wrapper);$viewContainer.empty();const $container=$("<div>",{class:"position-relative px-5"}).appendTo($viewContainer);const date=getDate($wrapper);const settings=getSettings($wrapper);const{startWeekOnSunday}=settings;const currentDay=date.getDay();const startOfWeek=new Date(date);const startOffset=startWeekOnSunday?currentDay:currentDay===0?6:currentDay-1;startOfWeek.setDate(date.getDate()-startOffset);const endOfWeek=new Date(startOfWeek);endOfWeek.setDate(startOfWeek.getDate()+6);const weekContainer=$("<div>",{class:"wc-week-view d-flex flex-nowrap",css:{paddingLeft:"40px"}}).appendTo($container);for(let day=0;day<7;day++){const currentDate=new Date(startOfWeek);currentDate.setDate(startOfWeek.getDate()+day);const dayContainer=$("<div>",{"data-week-day":currentDate.getDay(),class:"wc-day-week-view flex-grow-1 flex-fill border-end position-relative"}).appendTo(weekContainer);const showLabels=day===0;buildDayViewContent($wrapper,currentDate,dayContainer,true,showLabels)}}function buildDayViewContent($wrapper,date,$container,forWeekView=false,showLabels=true){const settings=getSettings($wrapper);const isToday=date.toDateString()===(new Date).toDateString();if(!forWeekView){$container=$("<div>",{class:"position-relative px-5"}).appendTo($container);$container=$("<div>",{css:{paddingLeft:"40px"}}).appendTo($container)}$container.attr("data-weekday");const headline=$("<div>",{class:"wc-day-header py-2 text-center fw-bold mb-2",text:date.toLocaleDateString(settings.locale,{weekday:"long",day:"numeric",month:"long"})}).appendTo($container);if(isToday){headline.addClass("text-primary")}if(forWeekView){headline.attr("data-date",formatDate($wrapper,date)).css("cursor","pointer")}const allDayContainer=$("<div>",{"data-all-day":true,class:"d-flex flex-column flex-fill"}).appendTo($container);const timeSlots=$("<div>",{class:"wc-day-view-time-slots d-flex flex-column position-relative  py-2"}).appendTo($container);for(let hour=0;hour<=24;hour++){const row=$("<div>",{"data-day-hour":hour,css:{height:"34px"},class:"d-flex align-items-center border-top position-relative"}).appendTo(timeSlots);if(showLabels){$("<div>",{class:"wc-time-label ps-2 position-absolute top-0 translate-middle text-bg-secondary",css:{left:"-34px"},html:`${hour.toString().padStart(2,"0")}:00 <i class="bi bi-caret-right-fill"></i>`}).appendTo(row)}}}function buildYearView($wrapper){const container=getViewContainer($wrapper);const settings=getSettings($wrapper);const date=getDate($wrapper);const year=date.getFullYear();container.empty();const grid=$("<div>",{class:"d-flex flex-wrap p-3",css:{gap:"10px"}}).appendTo(container);for(let month=0;month<12;month++){const monthWrapper=$("<div>",{class:"d-flex shadow p-3 flex-column rounded-"+settings.rounded+" align-items-center wc-year-month-container",css:{width:"200px",margin:"5px"}}).appendTo(grid);const monthName=new Intl.DateTimeFormat(settings.locale,{month:"long"}).format(new Date(year,month));$("<div>",{"data-month":`${year}-${String(month+1).padStart(2,"0")}-01`,class:"text-center fw-bold",text:`${monthName} ${year}`,css:{cursor:"pointer",marginBottom:"10px"}}).appendTo(monthWrapper);const monthContainer=$("<div>").appendTo(monthWrapper);const tempDate=new Date(year,month,1);buildMonthSmallView($wrapper,tempDate,monthContainer)}}})(jQuery);