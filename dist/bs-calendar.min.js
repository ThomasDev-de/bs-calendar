(function($){$.bsCalendar={setDefaults:function(options){this.DEFAULTS=$.extend(true,{},this.DEFAULTS,options||{})},getDefaults:function(){return this.DEFAULTS},DEFAULTS:{locale:"en-EN",startWeekOnSunday:true,rounded:5,search:{limit:10,offset:0},startDate:new Date,startView:"month",defaultColor:"var(--bs-danger)",views:["year","month","week","day"],translations:{day:"Day",week:"Week",month:"Month",year:"Year",today:"Today",appointment:"Appointment",search:"Search",searchNoResult:"No appointment found"},icons:{day:"bi bi-calendar-day",week:"bi bi-calendar-week",month:"bi bi-calendar-month",year:"bi bi-calendar4",add:"bi bi-plus-lg",search:"bi bi-search",prev:"bi bi-chevron-left",next:"bi bi-chevron-right",link:"bi bi-box-arrow-up-right",appointment:"bi bi-clock",appointmentAllDay:"bi bi-circle-fill",timeSlot:"bi bi-caret-right-fill"},url:null,queryParams:null,topbarAddons:null,sidebarAddons:null,debug:false,formatInfoWindow:formatInfoWindow,formatDuration:formatDuration}};const viewContainerClass="wc-calendar-view-container";const topNavClass="wc-calendar-top-nav";const topSearchClass="wc-calendar-top-search-nav";const hourSlotHeight=30;$.fn.bsCalendar=function(optionsOrMethod,params){if($(this).length>1){return $(this).each(function(i,e){return $(e).bsCalendar(optionsOrMethod,params)})}const optionsGiven=typeof optionsOrMethod==="object";const methodGiven=typeof optionsOrMethod==="string";const wrapper=$(this);if(!wrapper.data("initBsCalendar")){let settings=$.bsCalendar.getDefaults();if(wrapper.data()||optionsGiven){settings=$.extend(true,{},settings,wrapper.data(),optionsOrMethod||{})}setSettings(wrapper,settings);init(wrapper).then(()=>{})}if(methodGiven){const inSearchMode=getSearchMode(wrapper);switch(optionsOrMethod){case"refresh":methodRefresh(wrapper,params);break;case"clear":if(!inSearchMode){methodClear(wrapper)}break;case"updateOptions":methodUpdateOptions(wrapper,params);break;case"destroy":destroy(wrapper);break;case"setDate":if(!inSearchMode){methodSetDate(wrapper,params)}break;case"setToday":if(!inSearchMode){setToday(wrapper,params)}break}}return wrapper};function setToday($wrapper,view){const settings=getSettings($wrapper);if(view&&settings.views.includes(view)){const viewBefore=getView($wrapper);if(viewBefore!==view){setView($wrapper,view)}}const date=new Date;setDate($wrapper,date);buildByView($wrapper)}function methodSetDate($wrapper,object){const settings=getSettings($wrapper);let date=null;if(typeof object==="string"){date=new Date(object)}else if(object instanceof Date){date=object}else if(typeof object==="object"){if(object.hasOwnProperty("date")){if(typeof object.date==="string"){date=new Date(object.date)}else if(object.date instanceof Date){date=object.date}}if(object.hasOwnProperty("view")&&settings.views.includes(object.view)){const viewBefore=getView($wrapper);if(viewBefore!==object.view){setView($wrapper,object.view)}}}if(date){setDate($wrapper,date)}buildByView($wrapper)}function methodClear($wrapper,removeAppointments=true){$wrapper.find("[data-appointment]").remove();$wrapper.find(".popover").remove();if(removeAppointments){setAppointments($wrapper,[]).then(cleanedAppointments=>{})}}function destroy($wrapper){$wrapper.removeData("initBsCalendar");$wrapper.removeData("settings");$wrapper.removeData("view");$wrapper.removeData("date");$wrapper.removeData("appointments");$wrapper.removeData("searchMode");$wrapper.removeData("searchPagination");$wrapper.removeData("currentRequest");$wrapper.empty()}function methodUpdateOptions($wrapper,options){if(typeof options==="object"){const settingsBefore=getSettings($wrapper);const newSettings=$.extend(true,{},$.bsCalendar.getDefaults(),$wrapper.data(),settingsBefore,options||{});destroy($wrapper);setSettings($wrapper,newSettings);init($wrapper).then(()=>{})}}function methodRefresh($wrapper,object){const settings=getSettings($wrapper);let changeSettings=false;if(typeof object==="object"){if(object.hasOwnProperty("url")){settings.url=object.url;changeSettings=true}if(object.hasOwnProperty("view")&&settings.views.includes(object.view)){setView($wrapper,object.view);changeSettings=true}if(object.hasOwnProperty("queryParams")&&typeof object.queryParams==="function"){settings.queryParams=object.queryParams;changeSettings=true}}if(changeSettings){setSettings($wrapper,settings)}buildByView($wrapper)}function formatDuration(duration){const parts=[];if(duration.days>0){parts.push(`${duration.days}d`)}if(duration.hours>0){parts.push(`${duration.hours}h`)}if(duration.minutes>0){parts.push(`${duration.minutes}m`)}if(duration.seconds>0){parts.push(`${duration.seconds}s`)}return parts.length>0?parts.join(" "):"0s"}function formatInfoWindow(appointment){const description=appointment.hasOwnProperty("description")?"<p>"+appointment.description+"</p>":"";const color=appointment.hasOwnProperty("color")?`<i class="bi bi-circle-fill me-2" style="color: ${appointment.color}"></i>`:"";const link=appointment.hasOwnProperty("link")?`<a href="${appointment.link}" target="_blank" class="btn btn-primary btn-sm mt-3">open</a>`:"";const start=new Date(appointment.start);const end=new Date(appointment.end);const startFormatted=start.toLocaleString("de-DE",{dateStyle:"short",timeStyle:"short"});const endFormatted=end.toLocaleString("de-DE",{dateStyle:"short",timeStyle:"short"});const isAllDay=appointment.hasOwnProperty("allDay")&&appointment.allDay;const duration=isAllDay?"":$.bsCalendar.getDefaults().formatDuration(appointment.extras.duration);const startEnd=[`<span>Start: ${startFormatted}</span>`,`<span>End: ${endFormatted}</span>`,`<span>Duration: ${duration}</span>`];const period=isAllDay?`<span class="badge bg-info">all day</span>`:startEnd.join("");return[`<div class="d-flex flex-column">`,`<h4>${color}${appointment.title}</h4>`,description,period,link,`</div>`].join("")}function log(message,...params){if(window.console&&window.console.log){window.console.log("bsCalendar LOG: "+message,...params)}}function trigger($wrapper,event,...params){const settings=getSettings($wrapper);const p=params&&params.length>0?params:[];if(settings.debug){if(p.length>0){log("Triggering event:",event,"with params:",...p)}else{log("Triggering event:",event,"without params")}}if(event!=="all"){$wrapper.trigger("all.bs.calendar",event,...p);$wrapper.trigger(`${event}.bs.calendar`,...p)}}function init($wrapper){return new Promise((resolve,reject)=>{try{const settings=getSettings($wrapper);$wrapper.addClass("position-relative");if(!settings.hasOwnProperty("views")||settings.views.length===0){settings.views=["day","week","month","year"];setSettings($wrapper,settings)}if(!settings.hasOwnProperty("startView")||!settings.startView){settings.startView="month";setSettings($wrapper,settings)}if(!settings.views.includes(settings.startView)){settings.startView=settings.views[0];setSettings($wrapper,settings)}setView($wrapper,settings.startView);setDate($wrapper,settings.startDate);setSearchMode($wrapper,false);let searchObject=settings.search&&settings.search.hasOwnProperty("limit")&&settings.search.hasOwnProperty("offset")?{limit:settings.search.limit,offset:settings.search.offset}:null;setSearchPagination($wrapper,searchObject);buildFramework($wrapper);handleEvents($wrapper);buildMonthSmallView($wrapper,getDate($wrapper),$(".wc-calendar-month-small"));buildByView($wrapper);$wrapper.data("initBsCalendar",true);if(settings.debug){log("bsCalendar initialized")}trigger($wrapper,"init");resolve($wrapper)}catch(error){reject(error)}})}function getTimeFromDatetime(date){if(typeof date==="string"){date=new Date(date)}if(date.getHours()===0&&date.getMinutes()===0&&date.getSeconds()===0){return null}return`${date.getHours().toString().padStart(2,"0")}:${date.getMinutes().toString().padStart(2,"0")}:${date.getSeconds().toString().padStart(2,"0")}`}async function setAppointments($wrapper,appointments){const settings=getSettings($wrapper);return new Promise((resolve,reject)=>{if(appointments&&Array.isArray(appointments)&&appointments.length>0){const inSearchMode=getSearchMode($wrapper);sortAppointmentByStart(appointments,!inSearchMode).then(sortedAppointments=>{setAppointmentExtras($wrapper,appointments);$wrapper.data("appointments",appointments);resolve(appointments)}).catch(error=>{if(settings.debug){console.error("Error processing appointments:",error)}reject(error)})}else{appointments=[];$wrapper.data("appointments",appointments);resolve(appointments)}})}async function sortAppointmentByStart(appointments,sortAllDay=true){if(!appointments||!Array.isArray(appointments)||appointments.length===0){return[]}return new Promise((resolve,reject)=>{try{appointments.sort((a,b)=>{if(sortAllDay){if(a.allDay&&!b.allDay){return-1}if(!a.allDay&&b.allDay){return 1}}return new Date(a.start)-new Date(b.start)});resolve(appointments)}catch(error){reject(error)}})}function getAppointments($wrapper){return $wrapper.data("appointments")}function buildFramework($wrapper){const settings=getSettings($wrapper);$wrapper.empty();const innerWrapper=$("<div>",{class:"d-flex flex-column align-items-stretch h-100 w-100"}).appendTo($wrapper);const topNav=$("<div>",{class:`d-flex sticky-top align-items-center px-0 justify-content-end mb-3 ${topNavClass} bg-body rounded-${settings.rounded}`}).appendTo(innerWrapper);if(settings.topbarAddons&&$(settings.topbarAddons).length>0){$(settings.topbarAddons).insertAfter(topNav)}const topSearchNav=$("<div>",{class:`d-none sticky-top align-items-center px-0 justify-content-center mb-3 ${topSearchClass} bg-body rounded-${settings.rounded}`});$("<button>",{class:`btn rounded-${settings.rounded} border`,html:`<i class="${settings.icons.add}"></i>`,"data-add-appointment":true}).appendTo(topNav);$("<div>",{class:"spinner-border me-auto mr-auto mx-3 text-secondary wc-calendar-spinner",css:{display:"none"},role:"status",html:'<span class="visually-hidden">Loading...</span>'}).appendTo(topNav);$("<div>",{class:"me-auto mr-auto"}).appendTo(topNav);$("<div>",{class:"d-flex ms-2 align-items-center justify-content-center wc-nav-view-wrapper flex-nowrap text-nowrap",html:['<small class="wc-nav-view-name mr-3 me-3"></small>',`<a data-prev href="#"><i class="${settings.icons.prev}"></i></a>`,`<a class="mx-2" data-next href="#"><i class="${settings.icons.next}"></i></a>`].join("")}).appendTo(topNav);if(settings.search){topSearchNav.insertAfter(topNav);const showSearchbar=$("<button>",{class:`btn rounded-${settings.rounded} border js-btn-search`,html:`<i class="${settings.icons.search}"></i>`}).appendTo(topNav);showSearchbar.on("click",function(){toggleSearchBar($wrapper,true)});$("<input>",{type:"search",css:{maxWidth:"400px"},class:"form-control rounded-"+settings.rounded+"  border",placeholder:settings.translations.search||"search","data-search-input":true}).appendTo(topSearchNav);const btnCloseSearch=$("<button>",{class:`btn btn-close rounded-${settings.rounded} p-2 ms-2 js-btn-close-search`,"aria-label":"Close"}).appendTo(topSearchNav);btnCloseSearch.on("click",function(){toggleSearchBar($wrapper,false);if(getSearchMode($wrapper)){toggleSearchMode($wrapper,false,true)}})}$("<button>",{class:`btn rounded-${settings.rounded} ms-2 border`,html:settings.translations.today,"data-today":true}).appendTo(topNav);if(settings.views.length>1){const dropDownView=$("<div>",{class:"dropdown wc-select-calendar-view ms-2",html:[`<a class="btn rounded-${settings.rounded} border dropdown-toggle" href="#" role="button" data-toggle="dropdown" data-bs-toggle="dropdown" aria-expanded="false">`,"</a>",'<ul class="dropdown-menu">',"</ul>"].join("")}).appendTo(topNav);settings.views.forEach(view=>{$("<li>",{html:`<a class="dropdown-item" data-view="${view}" href="#"><i class="${settings.icons[view]} me-2 mr-2"></i> ${settings.translations[view]}</a>`}).appendTo(dropDownView.find("ul"))})}const container=$("<div>",{class:"d-flex flex-fill wc-calendar-container"}).appendTo(innerWrapper);const sidebar=$("<div>",{class:"wc-calendar-left-nav d-xl-flex d-none flex-column me-4 mr-4",html:['<div class="pb-3">','<div class="d-flex justify-content-between">','<small class="wc-nav-view-small-name me-3 mr-3"></small>',"<div>",`<a data-prev href="#"><i class="${settings.icons.prev}"></i></a>`,`<a class="ml-2 ms-2" data-next href="#"><i class="${settings.icons.next}"></i></a>`,"</div>","</div>","</div>",'<div class="wc-calendar-month-small"></div>'].join("")}).appendTo(container);if(settings.sidebarAddons&&$(settings.sidebarAddons).length>0){$(settings.sidebarAddons).appendTo(sidebar)}$("<div>",{class:`container-fluid ${viewContainerClass} pb-5 border-1 rounded-${settings.rounded} flex-fill border overflow-hidden  d-flex flex-column align-items-stretch`}).appendTo(container)}function setCurrentDateName($wrapper){const settings=getSettings($wrapper);const date=getDate($wrapper);const view=getView($wrapper);const el=$(".wc-nav-view-name");const elSmall=$(".wc-nav-view-small-name");const dayName=date.toLocaleDateString(settings.locale,{day:"numeric"});const weekdayName=date.toLocaleDateString(settings.locale,{weekday:"long"});const monthName=date.toLocaleDateString(settings.locale,{month:"long"});const yearName=date.toLocaleDateString(settings.locale,{year:"numeric"});const calendarWeek=getCalendarWeek(date);switch(view){case"day":el.text(weekdayName+", "+dayName+" "+monthName+" "+yearName);break;case"week":el.text("KW "+calendarWeek+" / "+monthName+" "+yearName);break;case"month":el.text(monthName+" "+yearName);break;case"year":el.text(yearName);break}elSmall.text(monthName+" "+yearName)}function navigateBack($wrapper){const view=getView($wrapper);const date=getDate($wrapper);const newDate=new Date(date);switch(view){case"month":newDate.setMonth(newDate.getMonth()-1);if(newDate.getDate()!==date.getDate()){newDate.setDate(1)}break;case"year":newDate.setFullYear(newDate.getFullYear()-1);newDate.setDate(1);break;case"week":newDate.setDate(newDate.getDate()-7);break;case"day":newDate.setDate(newDate.getDate()-1);break}setDate($wrapper,newDate);buildByView($wrapper)}function navigateForward($wrapper){const view=getView($wrapper);const date=getDate($wrapper);const newDate=new Date(date);switch(view){case"month":newDate.setMonth(newDate.getMonth()+1);if(newDate.getDate()!==date.getDate()){newDate.setDate(1)}break;case"year":newDate.setFullYear(newDate.getFullYear()+1);newDate.setDate(1);break;case"week":newDate.setDate(newDate.getDate()+7);break;case"day":newDate.setDate(newDate.getDate()+1);break}setDate($wrapper,newDate);buildByView($wrapper)}function toggleSearchBar($wrapper,status){const input=getSearchElement($wrapper);const topNav=$wrapper.find("."+topNavClass);const topSearchNav=$wrapper.find("."+topSearchClass);if(status){topNav.removeClass("d-flex").addClass("d-none");topSearchNav.removeClass("d-none").addClass("d-flex");input.focus()}else{input.val(null);topNav.removeClass("d-none").addClass("d-flex");topSearchNav.removeClass("d-flex").addClass("d-none")}}function toggleSearchMode($wrapper,status,rebuildView=true){const settings=getSettings($wrapper);setSearchMode($wrapper,status);if(status){buildByView($wrapper)}else{const search={limit:settings.search.limit,offset:settings.search.offset};setSearchPagination($wrapper,search);if(rebuildView){buildByView($wrapper)}}}function resetSearchPagination($wrapper){const settings=getSettings($wrapper);const search={limit:settings.search.limit,offset:settings.search.offset};setSearchPagination($wrapper,search)}function setSearchPagination($wrapper,object){console.log("***** setSearchPagination",object);const pagination=isValueEmpty(object)?null:object;$wrapper.data("searchPagination",pagination)}function getSearchPagination($wrapper){return $wrapper.data("searchPagination")}function setSearchMode($wrapper,status){$wrapper.data("searchMode",status)}function getSearchMode($wrapper){return $wrapper.data("searchMode")}function inSearchMode($wrapper){return $wrapper.data("searchMode")||false}function handleEvents($wrapper){let resizeTimer;$(window).on("resize",function(){clearTimeout(resizeTimer);resizeTimer=setTimeout(function(){console.log("Resizing beendet!");onResize($wrapper)},100)});$wrapper.on("click",".wc-search-pagination [data-page]",function(e){e.preventDefault();const $clickedLink=$(e.currentTarget);const newPage=parseInt($clickedLink.attr("data-page"));const searchPagination=getSearchPagination($wrapper);searchPagination.offset=(newPage-1)*searchPagination.limit;const search={limit:searchPagination.limit,offset:searchPagination.offset};setSearchPagination($wrapper,search);$wrapper.find(".wc-search-pagination").remove();fetchAppointments($wrapper)}).on("keyup","[data-search-input]",function(e){e.preventDefault();const input=$(e.currentTarget);const isEmpty=isValueEmpty(input.val());let inSearchMode=getSearchMode($wrapper);if(!inSearchMode&&!isEmpty){setSearchMode($wrapper,true,false);inSearchMode=true}if(isEmpty){toggleSearchMode($wrapper,false,true);return}const isEnterKey=e.type==="keyup"&&(e.key==="Enter"||e.which===13||e.keyCode===13);if(isEnterKey){triggerSearch($wrapper)}}).on("click","[data-add-appointment]",function(e){e.preventDefault();const inSearchMode=getSearchMode($wrapper);if(inSearchMode){e.stopPropagation()}else{const view=getView($wrapper);const period=getStartAndEndDateByView($wrapper);const data={date:period.date,view:{type:view,start:period.start,end:period.end}};trigger($wrapper,"add",[data])}}).on("click","[data-today]",function(e){e.preventDefault();const inSearchMode=getSearchMode($wrapper);if(inSearchMode){e.stopPropagation()}else{setToday($wrapper)}}).on("click touchend","[data-appointment]",function(e){const clickedOnDate=$(e.target).is("[data-date]");const clickedOnMonth=$(e.target).is("[data-month]");const clickedOnToday=$(e.target).is("[data-today]");const clickedOnAncor=$(e.target).is("a[href]")||$(e.target).closest("a[href]").length>0;if(clickedOnToday||clickedOnDate||clickedOnMonth||clickedOnAncor){e.stopPropagation();return}e.preventDefault();const element=$(e.currentTarget);element.popover("hide");element.removeClass("text-bg-light");const settings=getSettings($wrapper);const appointment=element.data("appointment");trigger($wrapper,"edit",[appointment,element])}).on("click","[data-date]",function(e){e.preventDefault();const settings=getSettings($wrapper);const inSearchMode=getSearchMode($wrapper);if(inSearchMode){toggleSearchMode($wrapper,false,false)}if(settings.views.includes("day")){const date=new Date($(e.currentTarget).attr("data-date"));setView($wrapper,"day");setDate($wrapper,date);buildByView($wrapper)}}).on("click","[data-month]",function(e){e.preventDefault();const settings=getSettings($wrapper);if(settings.views.includes("month")){const date=new Date($(e.currentTarget).attr("data-month"));setView($wrapper,"month");setDate($wrapper,date);buildByView($wrapper)}}).on("click","[data-prev]",function(e){e.preventDefault();const inSearchMode=getSearchMode($wrapper);if(inSearchMode){e.stopPropagation()}else{navigateBack($wrapper)}}).on("click","[data-next]",function(e){e.preventDefault();const inSearchMode=getSearchMode($wrapper);if(inSearchMode){e.stopPropagation()}else{navigateForward($wrapper)}}).on("click",".wc-select-calendar-view [data-view]",function(e){e.preventDefault();const inSearchMode=getSearchMode($wrapper);if(inSearchMode){e.stopPropagation()}else{setView($wrapper,$(e.currentTarget).data("view"));buildByView($wrapper)}})}function triggerSearch($wrapper){const settings=getSettings($wrapper);resetSearchPagination($wrapper);buildByView($wrapper)}function getSelectViewElement($wrapper){return $wrapper.find(".wc-select-calendar-view")}function getTodayButtonElement($wrapper){return $wrapper.find("[data-today]")}function getAddButtonElement($wrapper){return $wrapper.find("[data-add-appointment]")}function isValueEmpty(value){if(value===null||value===undefined){return true}if(Array.isArray(value)){return value.length===0}if(typeof value==="string"){return value.trim().length===0}return false}function updateDropdownView($wrapper){const dropdown=getSelectViewElement($wrapper);const view=getView($wrapper);dropdown.find(".dropdown-item.active").removeClass("active");dropdown.find(`[data-view="${view}"]`).addClass("active");const activeItem=dropdown.find(`[data-view="${view}"]`);dropdown.find(".dropdown-toggle").html(activeItem.html())}function getView($wrapper){return $wrapper.data("view")}function getLastView($wrapper){return $wrapper.data("lastView")}function setLastView($wrapper,view){$wrapper.data("lastView",view);console.log("------------------- last view: "+view)}function setView($wrapper,view){const settings=getSettings($wrapper);const lastView=getLastView($wrapper);const currentView=getView($wrapper);if(view!=="search"&&!["day","week","month","year"].includes(view)){if(settings.debug){console.error("Invalid view type provided. Defaulting to month view.","Provided view:",view)}view="month"}if(currentView!==view){setLastView($wrapper,currentView)}if(settings.debug){log("Set view to:",view)}$wrapper.data("view",view)}function getDate($wrapper){return $wrapper.data("date")}function setDate($wrapper,date){const settings=getSettings($wrapper);if(settings.debug){log("Set date to:",date)}$wrapper.data("date",date)}function getSettings($wrapper){return $wrapper.data("settings")}function setSettings($wrapper,settings){if(settings.debug){log("Set settings to:",settings)}$wrapper.data("settings",settings)}function getViewContainer($wrapper){return $wrapper.find("."+viewContainerClass)}function buildByView($wrapper){const settings=getSettings($wrapper);const view=getView($wrapper);if(settings.debug){log("Call buildByView with view:",view)}if(getSearchMode($wrapper)){buildSearchView($wrapper)}else{switch(view){case"month":buildMonthView($wrapper);break;case"week":buildWeekView($wrapper);break;case"year":buildYearView($wrapper);break;case"day":buildDayView($wrapper);break;default:break}onResize($wrapper);updateDropdownView($wrapper);setCurrentDateName($wrapper);buildMonthSmallView($wrapper,getDate($wrapper),$(".wc-calendar-month-small"));trigger($wrapper,"view",[view])}$wrapper.find(".popover").remove();fetchAppointments($wrapper)}function fetchAppointments($wrapper){methodClear($wrapper);const settings=getSettings($wrapper);let skipLoading=false;if(settings.debug){log("Call fetchAppointments")}let requestData;const inSearchMode=getSearchMode($wrapper);if(!inSearchMode){const view=getView($wrapper);const period=getStartAndEndDateByView($wrapper);if(view==="year"){requestData={year:new Date(period.date).getFullYear(),view:view}}else{requestData={fromDate:period.start,toDate:period.end,view:view}}}else{const searchElement=getSearchElement($wrapper);const search=searchElement?.val()??null;skipLoading=isValueEmpty(search);requestData={...getSearchPagination($wrapper),search:search}}if(typeof settings.queryParams==="function"){const queryParams=settings.queryParams(requestData);for(const key in queryParams){requestData[key]=queryParams[key]}}if(skipLoading){if(settings.debug){log("Skip loading appointments because search is empty")}setAppointments($wrapper,[]).then(cleanedAppointments=>{buildAppointmentsForView($wrapper)});return}trigger($wrapper,"beforeLoad",[requestData]);showLoader($wrapper);if(typeof settings.url==="function"){if(settings.debug){log("Call appointments by function with query:",requestData)}settings.url(requestData).then(appointments=>{if(settings.debug){log("result:",appointments)}if(inSearchMode){setAppointments($wrapper,appointments.rows).then(cleanedAppointments=>{buildAppointmentsForSearch($wrapper,cleanedAppointments,appointments.total)})}else{setAppointments($wrapper,appointments).then(cleanedAppointments=>{buildAppointmentsForView($wrapper)})}}).catch(error=>{hideLoader($wrapper);if(settings.debug){log("Error fetching appointments:",error)}}).finally(()=>{hideLoader($wrapper)})}else if(typeof settings.url==="string"){const existingRequest=$wrapper.data("currentRequest");if(existingRequest){existingRequest.abort();$wrapper.data("currentRequest",null)}if(settings.debug){log("Call appointments by URL:",settings.url)}const newRequest=$.ajax({url:settings.url,method:"GET",contentType:"application/json",data:JSON.stringify(requestData),success:function(response){if(inSearchMode){setAppointments($wrapper,response.rows).then(cleanedAppointments=>{buildAppointmentsForSearch($wrapper,cleanedAppointments,response.total)})}else{setAppointments($wrapper,response).then(cleanedAppointments=>{buildAppointmentsForView($wrapper)})}},error:function(xhr,status,error){if(status!=="abort"){if(settings.debug){log("Error when retrieving the dates:",status,error)}}},complete:function(){$wrapper.removeData("currentRequest");hideLoader($wrapper)}});$wrapper.data("currentRequest",newRequest)}}function isDarkBackgroundColor(color){let r,g,b;if(color.startsWith("#")){r=parseInt(color.slice(1,3),16);g=parseInt(color.slice(3,5),16);b=parseInt(color.slice(5,7),16)}else if(color.startsWith("rgb")){const rgbValues=color.match(/\d+/g);r=parseInt(rgbValues[0]);g=parseInt(rgbValues[1]);b=parseInt(rgbValues[2])}else{throw new Error("Unsupported color format")}const yiq=(r*299+g*587+b*114)/1e3;return yiq>128}function checkAppointmentOverlap(appointment1,appointment2){return new Date(appointment1.start)<new Date(appointment2.end)&&new Date(appointment1.end)>new Date(appointment2.start)}function fitsColumn(column,currentAppointment){for(let slot of column){if(!(currentAppointment.start>=slot.end||currentAppointment.end<=slot.start)){return false}}return true}function drawAppointmentsForWeek($wrapper,appointments){const container=getViewContainer($wrapper);const settings=getSettings($wrapper);const appointmentsByWeekday=[[],[],[],[],[],[],[]];appointments.forEach(appointment=>{const appointmentDate=new Date(appointment.extras.start.date);const weekday=appointmentDate.getDay();appointmentsByWeekday[weekday].push(appointment)});for(let weekday=0;weekday<7;weekday++){const dates=appointmentsByWeekday[weekday]||[];const $dayWrapper=container.find('[data-week-day="'+weekday+'"] .wc-day-view-time-slots');const margin=settings.startWeekOnSunday&&weekday===0||!settings.startWeekOnSunday&&weekday===1;drawAppointmentsForDay($wrapper,$dayWrapper,dates,margin?1:1)}}function _old_groupOverlappingAppointments(appointments){const weekdayData={};appointments.forEach(appointment=>{appointment.extras.displayDates.forEach(obj=>{const fakeStart=new Date(obj.date);const weekday=fakeStart.getDay();const slotStart=new Date(obj.date+" "+obj.times.start);const slotEnd=new Date(obj.date+" "+obj.times.end);if(!weekdayData[weekday]){weekdayData[weekday]={grouped:[],maxColumns:0}}const slotData=weekdayData[weekday];let addedToGroup=false;for(const group of slotData.grouped){if(group.some(other=>{const otherStart=new Date(other.start);const otherEnd=new Date(other.end);return slotStart<otherEnd&&slotEnd>otherStart})){group.push({start:slotStart,end:slotEnd,appointment:appointment});addedToGroup=true;break}}if(!addedToGroup){slotData.grouped.push([{start:slotStart,end:slotEnd,appointment:appointment}])}slotData.maxColumns=Math.max(slotData.maxColumns,slotData.grouped.length)})});return weekdayData}function groupOverlappingAppointments(appointments){const groupedByWeekdays={};appointments.forEach(appointment=>{appointment.extras.displayDates.forEach(obj=>{const slotStart=new Date(`${obj.date}T${obj.times.start}`);const slotEnd=new Date(`${obj.date}T${obj.times.end}`);const weekday=slotStart.getDay();if(!groupedByWeekdays[weekday]){groupedByWeekdays[weekday]={appointments:[],columns:[],fullWidth:[]}}groupedByWeekdays[weekday].appointments.push({start:slotStart,end:slotEnd,appointment:appointment})})});Object.keys(groupedByWeekdays).forEach(day=>{const{appointments,columns,fullWidth}=groupedByWeekdays[day];appointments.sort((a,b)=>a.start-b.start);appointments.forEach(appointment=>{let placedInColumn=false;for(let column of columns){if(doesNotOverlap(column,appointment)){column.push(appointment);placedInColumn=true;break}}if(!placedInColumn){const hasOverlap=appointments.some(otherAppointment=>otherAppointment!==appointment&&!(appointment.start>=otherAppointment.end||appointment.end<=otherAppointment.start));if(!hasOverlap&&columns.length===0){fullWidth.push(appointment)}else{columns.push([appointment])}}})});return groupedByWeekdays}function doesNotOverlap(column,newAppointment){for(const appointment of column){if(!(newAppointment.start>=appointment.end||newAppointment.end<=appointment.start)){return false}}return true}function drawAppointmentsForDay($wrapper,$container,appointments,marginLeft=1){const settings=getSettings($wrapper);const $viewContainer=getViewContainer($wrapper);const allDays=appointments.filter(appointment=>appointment.allDay===true);const notAllDays=appointments.filter(appointment=>appointment.allDay!==true);allDays.forEach(appointment=>{appointment.extras.displayDates.forEach(obj=>{const fakeStart=new Date(obj.date);const allDayWrapper=$viewContainer.find('[data-all-day="'+fakeStart.getDay()+'"]');if(allDayWrapper.length){allDayWrapper.addClass("pb-3");const appointmentElement=$("<div>",{"data-appointment":true,html:appointment.title,class:`badge mx-1 mb-1 flex-fill`,css:{backgroundColor:appointment.color||settings.defaultColor}}).appendTo(allDayWrapper);appointmentElement.data("appointment",appointment);setColorByBackgroundColor(appointmentElement,settings.defaultColor);setPopoverForAppointment($wrapper,appointmentElement)}})});const groupedAppointments=groupOverlappingAppointments(notAllDays);const columnGap=2;Object.entries(groupedAppointments).forEach(([weekday,{columns,fullWidth}])=>{const $weekDayContainer=$viewContainer.find(`[data-week-day="${weekday}"]`);const totalColumns=columns.length;columns.forEach((column,columnIndex)=>{column.forEach(slotData=>{const appointment=slotData.appointment;const backgroundColor=appointment.color||settings.defaultColor;const noOverlapWithNextColumns=columns.slice(columnIndex+1).every(nextColumn=>nextColumn.every(slot=>slotData.end<=slot.start||slotData.start>=slot.end));const totalGap=(totalColumns-1)*columnGap;let appointmentWidthPercent;if(noOverlapWithNextColumns){const remainingColumns=totalColumns-columnIndex;const remainingGap=(remainingColumns-1)*columnGap;appointmentWidthPercent=100-(columnIndex*(100/totalColumns)+remainingGap*100/$weekDayContainer.width())}else{appointmentWidthPercent=totalColumns>1?(100-totalGap*100/$weekDayContainer.width())/totalColumns:100}const appointmentLeftPercent=totalColumns>1?columnIndex*(100/totalColumns):0;const position=calculateSlotPosition(slotData.start.toISOString(),slotData.end.toISOString());const appointmentElement=$("<small>",{"data-appointment":true,class:"position-absolute text-nowrap text-truncate px-2 btn-sm overflow-hidden",css:{backgroundColor:backgroundColor,top:`${position.top}px`,height:`${position.height}px`,left:`${appointmentLeftPercent}%`,width:`${appointmentWidthPercent}%`},text:`${appointment.title}`}).appendTo($weekDayContainer);appointmentElement.data("appointment",appointment);setColorByBackgroundColor(appointmentElement,settings.defaultColor);setPopoverForAppointment($wrapper,appointmentElement)})});fullWidth.forEach(slotData=>{const appointment=slotData.appointment;const backgroundColor=appointment.color||settings.defaultColor;const appointmentWidthPercent=100;const appointmentLeftPercent=0;const position=calculateSlotPosition(slotData.start.toISOString(),slotData.end.toISOString());const appointmentElement=$("<small>",{"data-appointment":true,class:"position-absolute text-nowrap text-truncate px-2 btn-sm overflow-hidden",css:{backgroundColor:backgroundColor,top:`${position.top}px`,height:`${position.height}px`,left:`${appointmentLeftPercent}%`,width:`${appointmentWidthPercent}%`},text:`${appointment.title}`}).appendTo($weekDayContainer);appointmentElement.data("appointment",appointment);setColorByBackgroundColor(appointmentElement,settings.defaultColor);setPopoverForAppointment($wrapper,appointmentElement)})})}function setColorByBackgroundColor($el,defaultColor){const backgroundColor=$el.css("background-color")||defaultColor;$el.css("color",!isDarkBackgroundColor(backgroundColor)?"#ffffff":"#000000")}function isSameDate(date1,date2){return date1.getFullYear()===date2.getFullYear()&&date1.getMonth()===date2.getMonth()&&date1.getDate()===date2.getDate()}function buildAppointmentsForSearch($wrapper,appointments,total){const $container=getViewContainer($wrapper).find(".wc-search-result-container");const settings=getSettings($wrapper);if(settings.debug){log("Call buildAppointmentsForSearch with appointments:",appointments,total)}const input=getSearchElement($wrapper);const search=input.val().trim();if(isValueEmpty(search)){$container.html('<div class="d-flex p-5 align-items-center justify-content-center"></div>');input.appendTo($container.find(".d-flex"));input.focus();return}if(!appointments.length){$container.html('<div class="d-flex p-5 align-items-center justify-content-center">'+settings.translations.searchNoResult+"</div>");return}$container.css("font-size",".9rem").addClass("py-4");const searchPagination=getSearchPagination($wrapper);const page=Math.floor(searchPagination.offset/searchPagination.limit)+1;const itemsPerPage=searchPagination.limit;const totalPages=Math.ceil(total/itemsPerPage);const startIndex=(page-1)*itemsPerPage;const endIndex=Math.min(startIndex+itemsPerPage,total);const visibleAppointments=appointments.slice(0,endIndex-startIndex);$container.empty();buildSearchPagination($container,page,totalPages,itemsPerPage,total);const $appointmentContainer=$("<div>",{class:"list-group list-group-flush mb-3"}).appendTo($container);visibleAppointments.forEach(appointment=>{const borderLeftColor=appointment.color||settings.defaultColor;const firstCollStyle=[`border-left-color:${borderLeftColor}`,`border-left-width:5px`,`border-left-style:dotted`,`cursor:pointer`,`font-size:1.75rem`,`width: 60px`].join(";");const link=appointment.link?`<a class="btn btn-link p-0 mx-3 btn-sm " href="${appointment.link}" target="_blank"><i class="${settings.icons.link}"></i></a>`:"";const html=[`<div class="day fw-bold text-center" style="${firstCollStyle}" data-date="${formatDateToDateString(new Date(appointment.start))}">`,`${new Date(appointment.start).getDate()}`,`</div>`,`<div class="text-muted" style="width: 150px;">`,`${new Date(appointment.start).toLocaleDateString(settings.locale,{month:"short",year:"numeric",weekday:"short"})}`,`</div>`,`<div class="title-container flex-fill text-nowrap">`,`${appointment.title}`+link,`</div>`].join("");const appointmentElement=$("<div>",{"data-appointment":true,class:"list-group-item d-flex align-items-center g-3 py-1 overflow-hidden",html:html,css:{borderLeftColor:borderLeftColor}}).appendTo($appointmentContainer);appointmentElement.data("appointment",appointment);setPopoverForAppointment($wrapper,appointmentElement)});buildSearchPagination($container,page,totalPages,itemsPerPage,total)}function buildSearchPagination($container,currentPage,totalPages,itemsPerPage,total){if(totalPages<=1){return}const $paginationWrapper=$("<div>",{class:"d-flex align-items-center justify-content-between my-1 wc-search-pagination"}).appendTo($container);const startIndexDisplay=(currentPage-1)*itemsPerPage+1;const endIndexDisplay=Math.min(currentPage*itemsPerPage,total);const statusText=`${startIndexDisplay}-${endIndexDisplay} | ${total}`;$("<div>",{class:"alert alert-secondary me-4 py-2 px-4",text:statusText}).appendTo($paginationWrapper);const $pagination=$("<nav>",{"aria-label":"Page navigation"}).appendTo($paginationWrapper);const $paginationList=$("<ul>",{class:"pagination mb-0"}).appendTo($pagination);const maxAdjacentPages=2;const addPage=page=>{const $pageItem=$("<li>",{class:"page-item"});if(page===currentPage){$pageItem.addClass("active")}const $pageLink=$("<a>",{"data-page":page,class:"page-link",href:"#"+page,text:page});$pageLink.appendTo($pageItem);$pageItem.appendTo($paginationList)};const addEllipsis=()=>{$("<li>",{class:"page-item disabled"}).append($("<span>",{class:"page-link",text:"..."})).appendTo($paginationList)};if(currentPage>maxAdjacentPages+1){addPage(1);if(currentPage>maxAdjacentPages+2){addEllipsis()}}for(let i=Math.max(1,currentPage-maxAdjacentPages);i<currentPage;i++){addPage(i)}addPage(currentPage);for(let i=currentPage+1;i<=Math.min(totalPages,currentPage+maxAdjacentPages);i++){addPage(i)}if(currentPage<totalPages-maxAdjacentPages){if(currentPage<totalPages-maxAdjacentPages-1){addEllipsis()}addPage(totalPages)}}function drawAppointmentsForMonth($wrapper,appointments){const $container=getViewContainer($wrapper);const settings=getSettings($wrapper);if(settings.debug){log("Call buildAppointmentsForMonth with appointments:",appointments)}appointments.forEach(appointment=>{const multipleStartDates=appointment.extras.displayDates.length>1;appointment.extras.displayDates.forEach(obj=>{const startString=obj.date;const fakeStart=new Date(startString);const start=new Date(appointment.start);const sameDate=isSameDate(fakeStart,start);const isNotStartOnThisDay=multipleStartDates&&!sameDate;const isStartOnThisDay=multipleStartDates&&sameDate;const startTime=start.toLocaleTimeString(settings.locale,{hour:"2-digit",minute:"2-digit"});const dayContainer=$container.find(`[data-month-date="${startString}"]`);let iconClass=settings.icons.appointment;if(appointment.allDay){iconClass=settings.icons.appointmentAllDay}const timeToShow=appointment.allDay?"":`<small class="me-1 mr-1">${startTime}</small>`;const appointmentElement=$("<small>",{"data-appointment":true,css:{fontSize:"12px",lineHeight:"16px"},class:"px-1 w-100 overflow-hidden",html:[`<div class=" d-flex align-items-center flex-nowrap">`,`<i class="${iconClass} me-1 mr-1" style="color: ${appointment.color||settings.defaultColor}; font-size: 12px"></i>`,timeToShow,`<strong class="text-nowrap">${appointment.title}</strong>`,`</div>`].join("")}).appendTo(dayContainer);appointmentElement.data("appointment",appointment);setPopoverForAppointment($wrapper,appointmentElement)})})}function setPopoverForAppointment($wrapper,$appointmentElement){const settings=getSettings($wrapper);if(typeof settings.formatInfoWindow==="function"){$appointmentElement.css("cursor","pointer");const appointment=$appointmentElement.data("appointment");const delayShow=400;const delayHide=400;const activeClass="text-bg-light";$appointmentElement.popover({animation:false,sanitize:false,trigger:"manual",html:true,content:settings.formatInfoWindow(appointment),container:$wrapper}).on("mouseenter touchstart",function(){$("[data-appointment]").not($(this)).popover("hide").removeClass(activeClass);const _this=this;$(_this).data("timeout",setTimeout(()=>{$(_this).popover("show");$(_this).addClass(activeClass);const popover=$(".popover");popover.on("mouseenter",function(){clearTimeout($(_this).data("timeout"))});popover.on("mouseleave touchend",function(){$(_this).data("timeout",setTimeout(()=>{$(_this).popover("hide");$(_this).removeClass(activeClass)},delayHide))})},delayShow))}).on("mouseleave touchend",function(){clearTimeout($(this).data("timeout"));const _this=this;$(_this).data("timeout",setTimeout(()=>{$(_this).popover("hide");$(_this).removeClass(activeClass)},delayHide))})}}function setAppointmentExtras($wrapper,appointments){const settings=getSettings($wrapper);appointments.forEach(appointment=>{const start=new Date(appointment.start);const end=new Date(appointment.end);const extras={start:{date:formatDateToDateString(appointment.start),time:getTimeFromDatetime(appointment.start)},end:{date:formatDateToDateString(appointment.end),time:getTimeFromDatetime(appointment.end)},duration:{days:0,hours:0,minutes:0,seconds:0},displayDates:[],inADay:false};let tempDate=new Date(start);let tempEnd=new Date(end);tempDate.setHours(0,0,0,0);tempEnd.setHours(0,0,0,0);while(tempDate<=tempEnd){const dateIsStart=isSameDate(tempDate,start);const dateIsEnd=isSameDate(tempDate,end);const dateDetails={date:formatDateToDateString(tempDate),times:{start:null,end:null}};if(appointment.allDay){dateDetails.times.start=null;dateDetails.times.end=null}else{if(dateIsStart){dateDetails.times.start=getTimeFromDatetime(start);dateDetails.times.end=end>new Date(tempDate).setHours(23,59,59,999)?"23:59":getTimeFromDatetime(end)}else if(dateIsEnd){dateDetails.times.start="00:00";dateDetails.times.end=getTimeFromDatetime(end)}else{dateDetails.times.start="00:00";dateDetails.times.end="23:59"}}extras.displayDates.push(dateDetails);tempDate.setDate(tempDate.getDate()+1)}extras.inADay=extras.displayDates.length===1;const diffMillis=end-start;const totalSeconds=Math.floor(diffMillis/1e3);extras.duration.days=Math.floor(totalSeconds/(24*3600));extras.duration.hours=Math.floor(totalSeconds%(24*3600)/3600);extras.duration.minutes=Math.floor(totalSeconds%3600/60);extras.duration.seconds=totalSeconds%60;if(settings.debug){log("Calculated extras:",extras,"appointment:",appointment)}appointment.extras=extras})}function buildAppointmentsForView($wrapper){methodClear($wrapper,false);const settings=getSettings($wrapper);const appointments=getAppointments($wrapper);const isSearchMode=getSearchMode($wrapper);if(false&&isSearchMode){if(settings.debug){log("Call renderData in search mode")}buildAppointmentsForSearch($wrapper,appointments.rows,appointments.total)}else{const view=getView($wrapper);const container=getViewContainer($wrapper);if(settings.debug){log("Call renderData with view:",view)}switch(view){case"day":const overContainer=container.find(".wc-day-view-time-slots");drawAppointmentsForDay($wrapper,overContainer,appointments);break;case"week":drawAppointmentsForWeek($wrapper,appointments);break;case"month":drawAppointmentsForMonth($wrapper,appointments);break;case"year":drawAppointmentsForYear($wrapper,appointments);break}}}function drawAppointmentsForYear($wrapper,appointments){const $container=getViewContainer($wrapper);appointments.forEach(appointment=>{if(appointment.hasOwnProperty("date")&&appointment.hasOwnProperty("total")&&parseInt(appointment.total)>0){$container.find(`[data-date="${appointment.date}"] .badge`).text(appointment.total)}})}function showLoader($wrapper){const spinner=$wrapper.find(".wc-calendar-spinner");spinner.show();$("<div>",{class:"wc-calendar-overlay opacity-25 position-absolute top-0 start-0 w-100 h-100 d-flex justify-content-center align-items-center",html:'<div class="spinner-grow" role="status"  style="width: 7rem; height: 7rem;"><span class="visually-hidden">Loading...</span></div>'}).appendTo($wrapper)}function hideLoader($wrapper){const spinner=$wrapper.find(".wc-calendar-spinner");$wrapper.find(".wc-calendar-overlay").remove();spinner.hide()}function getStartAndEndDateByView($wrapper){const settings=getSettings($wrapper);const date=getDate($wrapper);const view=getView($wrapper);const startDate=new Date(date);const endDate=new Date(date);switch(view){case"day":break;case"week":const dayOfWeek=startDate.getDay();const diffToMonday=dayOfWeek===0?-6:1-dayOfWeek;startDate.setDate(startDate.getDate()+diffToMonday);endDate.setDate(startDate.getDate()+6);break;case"month":startDate.setDate(1);endDate.setMonth(startDate.getMonth()+1);endDate.setDate(0);break;case"year":case"search":startDate.setMonth(0);startDate.setDate(1);endDate.setMonth(11);endDate.setDate(31);break;default:if(settings.debug){console.error("Unknown view:",view)}break}return{date:formatDateToDateString(date),start:formatDateToDateString(startDate),end:formatDateToDateString(endDate)}}function formatDateToDateString(date){const dateObj=typeof date==="string"?new Date(date):date;const year=dateObj.getFullYear();const month=String(dateObj.getMonth()+1).padStart(2,"0");const day=String(dateObj.getDate()).padStart(2,"0");return`${year}-${month}-${day}`}function getSearchElement($wrapper){return $wrapper.find("[data-search-input]")||null}function getShortWeekDayNames(locale,startWeekOnSunday){const formatter=new Intl.DateTimeFormat(locale,{weekday:"short"});const weekDays=[...Array(7).keys()].map(day=>formatter.format(new Date(Date.UTC(2023,0,day+1))));return startWeekOnSunday?weekDays:weekDays.slice(1).concat(weekDays[0])}function buildSearchView($wrapper){const container=getViewContainer($wrapper);container.empty();$("<div>",{class:"wc-search-result-container list-group list-group-flush overflow-auto"}).appendTo(container)}function buildMonthView($wrapper){const container=getViewContainer($wrapper);const settings=getSettings($wrapper);const date=getDate($wrapper);const{locale,startWeekOnSunday}=settings;const year=date.getFullYear();const month=date.getMonth();const firstDayOfMonth=new Date(year,month,1);const lastDayOfMonth=new Date(year,month+1,0);let calendarStart=new Date(firstDayOfMonth);while(calendarStart.getDay()!==(startWeekOnSunday?0:1)){calendarStart.setDate(calendarStart.getDate()-1)}let calendarEnd=new Date(lastDayOfMonth);while(calendarEnd.getDay()!==(startWeekOnSunday?6:0)){calendarEnd.setDate(calendarEnd.getDate()+1)}container.empty();const weekDays=getShortWeekDayNames(locale,startWeekOnSunday);let currentDate=new Date(calendarStart);let isFirstRow=true;while(currentDate<=calendarEnd){const weekRow=$("<div>",{class:"row border-top d-flex flex-nowrap flex-fill wc-calendar-content"});const calendarWeek=getCalendarWeek(currentDate);const paddingTop=isFirstRow?"1.75rem":".75rem";weekRow.append($("<div>",{class:`col px-1 d-flex align-items-start pt-${paddingTop} fw-bold justify-content-center bg-body-tertiary`,css:{paddingTop:paddingTop,fontSize:"12px",width:"24px",maxWidth:"24px",minWidth:"24px"},html:`<small>${calendarWeek}</small>`}));for(let i=0;i<7;i++){const isToday=currentDate.toDateString()===(new Date).toDateString();const isOtherMonth=currentDate.getMonth()!==month;const dayClass=isToday?"rounded-circle text-bg-primary":"";const isLastRow=currentDate.getTime()===calendarEnd.getTime();const isLastColumn=i===6;let borderClasses=[];if(isLastRow){borderClasses.push("border-bottom")}borderClasses.push("border-start border-left");if(isLastColumn){borderClasses.push("border-end border-right")}const dayWrapper=$("<div>",{"data-month-date":formatDateToDateString(currentDate),class:`col ${borderClasses.join(" ")} px-1 flex-fill d-flex flex-column align-items-center justify-content-start ${isOtherMonth?"text-muted":""} ${isToday?"":""}`,css:{maxHeight:"100%",overflowY:"auto"}}).appendTo(weekRow);if(isFirstRow){$("<small>",{class:"text-center text-uppercase fw-bold pt-1",css:{lineHeight:"16px",fontSize:"10px"},text:weekDays[i]}).appendTo(dayWrapper)}$("<small>",{"data-date":formatDateToDateString(currentDate),css:{width:"24px",height:"24px",lineHeight:"24px",fontSize:"12px"},class:`${dayClass} text-center my-1`,text:currentDate.getDate()}).appendTo(dayWrapper);currentDate.setDate(currentDate.getDate()+1)}isFirstRow=false;container.append(weekRow)}}function onResize($wrapper){const view=getView($wrapper);const calendarContainer=getViewContainer($wrapper);if(view==="month"){const dayElements=calendarContainer.find("[data-month-date]");let squareHeight=0;dayElements.each(function(){const width=$(this).outerWidth();$(this).css("height",`${width}px`);squareHeight=width});const rowCount=Math.ceil(dayElements.length/7);const totalHeight=rowCount*squareHeight;calendarContainer.css("height",`${totalHeight}px`)}else{calendarContainer.css("height","")}}function buildMonthSmallView($wrapper,forDate,$container,forYearView=false){const settings=getSettings($wrapper);const date=forDate;const activeDate=getDate($wrapper);const cellSize=forYearView?36:24;const fontSize=forYearView?12:10;const year=date.getFullYear();const month=date.getMonth();const firstDayOfMonth=new Date(year,month,1);const lastDayOfMonth=new Date(year,month+1,0);let calendarStart=new Date(firstDayOfMonth);while(calendarStart.getDay()!==1){calendarStart.setDate(calendarStart.getDate()-1)}let calendarEnd=new Date(lastDayOfMonth);while(calendarEnd.getDay()!==0){calendarEnd.setDate(calendarEnd.getDate()+1)}$container.empty();$container.addClass("table-responsive overflow-visible");const table=$("<table>",{class:"wc-mini-calendar",css:{fontSize:"10px",borderSpacing:"0",borderCollapse:"collapse",tableLayout:"fixed",textAlign:"center",verticalAlign:"middle",lineHeight:"1.5",padding:"0",margin:"0",backgroundColor:"transparent",border:"0"}}).appendTo($container);const thead=$("<thead>").appendTo(table);const weekdaysRow=$("<tr>",{class:"",css:{height:`${cellSize}px`}}).appendTo(thead);$("<th>",{class:"",css:{width:"15px"},text:""}).appendTo(weekdaysRow);const weekDays=getShortWeekDayNames(settings.locale,settings.startWeekOnSunday);weekDays.forEach(day=>{$("<th>",{class:"",text:day,css:{width:`${cellSize}px`}}).appendTo(weekdaysRow)});const tbody=$("<tbody>").appendTo(table);let currentDate=new Date(calendarStart);while(currentDate<=calendarEnd){const weekRow=$("<tr>",{css:{fontSize:`${fontSize}px`}}).appendTo(tbody);const calendarWeek=getCalendarWeek(currentDate);$("<td>",{css:{width:`${fontSize}px`,fontSize:`${fontSize}px`},class:"px-1 text-center bg-body-tertiary",text:calendarWeek}).appendTo(weekRow);for(let i=0;i<7;i++){const isToday=currentDate.toDateString()===(new Date).toDateString();const isOtherMonth=currentDate.getMonth()!==month;const isSelected=currentDate.toDateString()===activeDate.toDateString();let dayClass="rounded-circle";if(isToday){dayClass+="  text-bg-primary "}if(isOtherMonth){dayClass+=" text-muted opacity-50"}if(isSelected&&!isToday){dayClass+=" border border-warning"}let badge="";if(forYearView){badge=`<span class="badge rounded-pill bg-warning position-absolute top-100 start-50 translate-middle"></span>`}const tdContent=[`<div class="${dayClass} w-100 h-100 d-flex justify-content-center flex-column align-items-center">`,`<span>${currentDate.getDate()}</span>`,badge,`</div>`].join("");$("<td>",{"data-date":formatDateToDateString(currentDate),class:`position-relative`,css:{cursor:"pointer",fontSize:`${fontSize}px`,width:`${cellSize}px`,height:`${cellSize}px`,lineHeight:`${cellSize/2}px`,verticalAlign:"middle",textAlign:"center"},html:tdContent}).appendTo(weekRow);currentDate.setDate(currentDate.getDate()+1)}}}function buildDayView($wrapper){const $container=getViewContainer($wrapper).empty();const date=getDate($wrapper);const headline=$("<div>",{class:"wc-day-header mb-2 ms-5",css:{paddingLeft:"40px"},html:buildHeaderForDay($wrapper,date,false)}).appendTo($container);headline.attr("data-date",formatDateToDateString(date)).css("cursor","pointer");const allDayContainer=$("<div>",{"data-all-day":date.getDay(),class:"mx-5",css:{paddingLeft:"40px"}}).appendTo($container);buildDayViewContent($wrapper,date,$container)}function getCalendarWeek(date){const target=new Date(Date.UTC(date.getFullYear(),date.getMonth(),date.getDate()));const dayNr=(target.getUTCDay()+6)%7;target.setUTCDate(target.getUTCDate()-dayNr+3);const firstThursday=new Date(Date.UTC(target.getUTCFullYear(),0,4));const firstDayOfWeek=firstThursday.getUTCDate()-(firstThursday.getUTCDay()+6)%7;return Math.floor(1+(target-new Date(Date.UTC(target.getUTCFullYear(),0,firstDayOfWeek)))/(7*24*60*60*1e3))}function buildWeekView($wrapper){const $viewContainer=getViewContainer($wrapper);$viewContainer.empty();const $container=$("<div>",{class:"position-relative px-5"}).appendTo($viewContainer);const date=getDate($wrapper);const settings=getSettings($wrapper);const{startWeekOnSunday}=settings;const currentDay=date.getDay();const startOfWeek=new Date(date);const startOffset=startWeekOnSunday?currentDay:currentDay===0?6:currentDay-1;startOfWeek.setDate(date.getDate()-startOffset);const endOfWeek=new Date(startOfWeek);endOfWeek.setDate(startOfWeek.getDate()+6);const wrappAllDay=$("<div>",{class:"d-flex flex-nowrap flex-fill w-100",css:{paddingLeft:"40px"}}).appendTo($container);for(let day=0;day<7;day++){const col=$("<div>",{class:"flex-grow-1 d-flex flex-column jusify-content-center align-items-center flex-fill position-relative overflow-hidden",css:{width:100/7+"%"}}).appendTo(wrappAllDay);const currentDate=new Date(startOfWeek);currentDate.setDate(startOfWeek.getDate()+day);const headline=$("<div>",{class:"wc-day-header mb-2",html:buildHeaderForDay($wrapper,currentDate,false)}).appendTo(col);headline.attr("data-date",formatDateToDateString(currentDate)).css("cursor","pointer");const allDayContainer=$("<div>",{"data-all-day":currentDate.getDay(),class:"d-flex flex-column align-items-stretch flex-fill w-100"}).appendTo(col)}const weekContainer=$("<div>",{class:"wc-week-view d-flex flex-nowrap",css:{paddingLeft:"40px"}}).appendTo($container);for(let day=0;day<7;day++){const currentDate=new Date(startOfWeek);currentDate.setDate(startOfWeek.getDate()+day);const dayContainer=$("<div>",{"data-week-day":currentDate.getDay(),class:"wc-day-week-view flex-grow-1 flex-fill border-end position-relative",css:{width:100/7+"%"}}).appendTo(weekContainer);const showLabels=day===0;buildDayViewContent($wrapper,currentDate,dayContainer,true,showLabels)}}function buildHeaderForDay($wrapper,date,forWeekView=false){const settings=getSettings($wrapper);const day=date.toLocaleDateString(settings.locale,{day:"numeric"});const shortMonth=date.toLocaleDateString(settings.locale,{month:"short"});const longMonth=date.toLocaleDateString(settings.locale,{month:"long"});const shortWeekday=date.toLocaleDateString(settings.locale,{weekday:"short"});const longWeekday=date.toLocaleDateString(settings.locale,{weekday:"long"});const justify=forWeekView?"center":"start";const isToday=date.toDateString()===(new Date).toDateString();const todayColor=isToday?"text-primary":"";const todayClass=isToday?"text-bg-primary rounded-circle":"";const circleCss=["width: 44px","height: 44px","line-height: 44px"].join(";");return[`<div class="d-flex flex-column justify-content-center  w-100 p-2 align-items-${justify} ${todayColor}">`,`<div class="d-flex justify-content-center" style="width: 44px"><small>${shortWeekday}</small></div>`,`<span style="${circleCss}" class="h4 m-0 text-center ${todayClass}">${day}</span>`,`</div>`].join("")}function buildDayViewContent($wrapper,date,$container,forWeekView=false,showLabels=true){const settings=getSettings($wrapper);const isToday=date.toDateString()===(new Date).toDateString();if(!forWeekView){$container=$("<div>",{class:"position-relative px-5"}).appendTo($container);$container=$("<div>",{css:{paddingLeft:"40px"}}).appendTo($container)}$container.attr("data-weekday");$container.css("boxSizing","border-box");const longHeader=date.toLocaleDateString(settings.locale,{weekday:"long",day:"numeric",month:"long"});const shortHeader=date.toLocaleDateString(settings.locale,{weekday:"short",day:"numeric",month:"short"});$("<div>",{"data-all-day":true,class:"d-flex flex-column flex-fill"}).appendTo($container);const timeSlots=$("<div>",{"data-week-day":date.getDay(),class:"wc-day-view-time-slots d-flex flex-column position-relative"}).appendTo($container);for(let hour=0;hour<=24;hour++){const isLast=hour===24;const height=isLast?0:hourSlotHeight;const marginBottom=isLast?hourSlotHeight:0;const css=isLast?{}:{boxSizing:"border-box",height:height+"px",cursor:"copy"};const row=$("<div>",{"data-day-hour":hour,css:css,class:"d-flex align-items-center border-top position-relative"}).appendTo(timeSlots);row.on("click",function(){const formatted=formatDateToDateString(date)+" "+String(hour).padStart(2,"0")+":"+"00"+":"+"00";const newDate=new Date(formatted);const untilDate=new Date(newDate);untilDate.setMinutes(untilDate.getMinutes()+30);const period=getStartAndEndDateByView($wrapper);const data={date:formatDateToDateString(newDate),view:{type:getView($wrapper),start:formatDateToDateString(newDate),end:formatDateToDateString(untilDate)}};trigger($wrapper,"add",[data])});if(showLabels){$("<div>",{class:"wc-time-label ps-2 position-absolute top-0 translate-middle",css:{left:`-34px`},html:`${hour.toString().padStart(2,"0")}:00 <i class="${settings.icons.timeSlot}"></i>`}).appendTo(row)}}if(isToday){addCurrentTimeIndicator($wrapper,timeSlots)}}function addCurrentTimeIndicator($wrapper,$container){const now=new Date;const currentTimeIndicator=$("<div>",{class:"current-time-indicator position-absolute bg-danger-subtle",css:{boxSizing:"border-box",height:"1px",width:"100%",zIndex:10,top:calculateSlotPosition(now).top}}).appendTo($container);$('<small class="position-absolute top-0 start-0 translate-middle badge bg-danger-subtle js-current-time">'+getMinutesAndSeconds($wrapper,now)+"</small>").appendTo(currentTimeIndicator);$('<div class="position-absolute top-50 start-100 translate-middle rounded-circle bg-danger-subtle" style="width: 10px; height: 10px"></div>').appendTo(currentTimeIndicator);const intervalId=setInterval(()=>{if($wrapper.find(".current-time-indicator").length===0){clearInterval(intervalId);return}const now=new Date;currentTimeIndicator.css("top",calculateSlotPosition(now).top);currentTimeIndicator.find(".js-current-time").text(getMinutesAndSeconds($wrapper,now))},60*1e3);currentTimeIndicator.css("top",calculateSlotPosition(now).top)}function calculateSlotPosition(startDate,endDate){if(typeof startDate==="string"){startDate=new Date(startDate)}if(typeof endDate==="string"){endDate=new Date(endDate)}const startHours=startDate.getHours();const startMinutes=startDate.getMinutes();const top=startHours*hourSlotHeight+startMinutes/60*hourSlotHeight+4;let height=0;if(endDate){const endHours=endDate.getHours();const endMinutes=endDate.getMinutes();const durationMinutes=endHours*60+endMinutes-(startHours*60+startMinutes);height=durationMinutes/60*hourSlotHeight}return{top:top-4,height:height}}function getMinutesAndSeconds($wrapper,date){const settings=getSettings($wrapper);return date.toLocaleTimeString(settings.locale,{hour:"2-digit",minute:"2-digit"})}function buildYearView($wrapper){const container=getViewContainer($wrapper);const settings=getSettings($wrapper);const date=getDate($wrapper);const year=date.getFullYear();container.empty();const grid=$("<div>",{class:"d-flex flex-wrap p-3",css:{gap:"10px"}}).appendTo(container);for(let month=0;month<12;month++){const monthWrapper=$("<div>",{class:"d-flex p-2 flex-column rounded-"+settings.rounded+" align-items-start wc-year-month-container",css:{margin:"5px"}}).appendTo(grid);const monthName=new Intl.DateTimeFormat(settings.locale,{month:"long"}).format(new Date(year,month));$("<div>",{"data-month":`${year}-${String(month+1).padStart(2,"0")}-01`,class:"w-bold",text:`${monthName}`,css:{cursor:"pointer",marginBottom:"10px"}}).appendTo(monthWrapper);const monthContainer=$("<div>").appendTo(monthWrapper);const tempDate=new Date(year,month,1);buildMonthSmallView($wrapper,tempDate,monthContainer,true)}}})(jQuery);